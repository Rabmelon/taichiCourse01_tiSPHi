{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to tiSPHi For full introduction please visit tiSPHi github . Prerequisites Python 3.6 / 3.7 / 3.8 / 3.9 / 3.10 (64-bit) Python requirements # FOR TAICHI PROGRAMS taichi numpy vulkan Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-tisphi","text":"For full introduction please visit tiSPHi github .","title":"Welcome to tiSPHi"},{"location":"#prerequisites","text":"","title":"Prerequisites"},{"location":"#python","text":"3.6 / 3.7 / 3.8 / 3.9 / 3.10 (64-bit)","title":"Python"},{"location":"#python-requirements","text":"# FOR TAICHI PROGRAMS taichi numpy vulkan","title":"Python requirements"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About @Zhibin Lei, M. Sc. Lehrstuhl f\u00fcr Geotechnik im Bauwesen Institut f\u00fcr Geomechanik und Untergrundtechnik (GUT) RWTH Aachen University Mies-van-der-Rohe-Stra\u00dfe 1 52074 Aachen Deutschland Raum 323/4 Tel.: +49 241 80 24172 Fax.: +49 241 80 22384 E-M@il: lei@gut.rwth-aachen.de Website: https://www.gut.rwth-aachen.de","title":"About"},{"location":"about/#about","text":"@Zhibin Lei, M. Sc. Lehrstuhl f\u00fcr Geotechnik im Bauwesen Institut f\u00fcr Geomechanik und Untergrundtechnik (GUT) RWTH Aachen University Mies-van-der-Rohe-Stra\u00dfe 1 52074 Aachen Deutschland Raum 323/4 Tel.: +49 241 80 24172 Fax.: +49 241 80 22384 E-M@il: lei@gut.rwth-aachen.de Website: https://www.gut.rwth-aachen.de","title":"About"},{"location":"basic/","text":"Basic mathematics and mechanics Tensor Tensors are simply mathematical objects that can be used to describe physical properties, a tensor is something that transforms like a tensor. The laws of physics described in tensor automatically guarantee this property of being invariant with the reference frame. The rank (or order) of a tensor is defined by the number of directions required to describe it. A scalar is a 0 rank tensor, a vector is a first rank tensor, a matrix is a two rank tensor. In general, in a 3D space, an \\(n^{th}\\) rank tensor can be described by \\(3^n\\) coefficients. Einstein summation convention Einstein summation convention is a notational convention that implies summation over a set of indexed terms in a formula, thus achieving brevity. * Summation index (dummy index) : an index that is summed over. \\(i\\) in \\(y=\\sum_{i=1}^3c_ix_i=c_1x_1+c_2x_2+c_3x_3=c_ix_i\\) * A dummy index can only appear twice in one item. If there are more dummy indexes in one item, it should be added a summation symbol: \\(a_1b_1c_1+a_2b_2c_2+a_3b_3c_3=\\sum_{i=1}^3a_ib_ic_i\\) not just \\(a_ib_ic_i\\) * Free index : an index that is not summed over. \\(j\\) in \\(v_i=\\sum_{j=1}^3=a_ib_jx_j=a_ib_1x_1+a_ib_2x_2+a_ib_3x_3\\) * A free index cannot be written twice in one item. Unless otherwise specified, \\(i,j,k,...\\) represent 3D index, and \\(\\alpha,\\beta,\\gamma,...\\) represent 2D index: \\(\\boldsymbol{a}\\cdot\\boldsymbol{b}=a_ib_i=a_1b_1+a_2b_2+a_3b_3\\) and \\(\\boldsymbol{a}\\cdot\\boldsymbol{b}=a_{\\alpha}b_{\\alpha}=a_1b_1+a_2b_2\\) Kronecker delta Levi-Civita symbol Tensor equation / algebra Some commonly used special tensors Chain rule in derivative \\[ \\begin{aligned} h &= f(g(x)) \\\\ h &= (f\\circ g)(x) \\\\ h'(x) &= f'(g(x))g'(x) \\\\ \\frac{{\\rm d}(f\\circ g)}{{\\rm d}x} &= \\frac{{\\rm d}f}{{\\rm d}g}\\frac{{\\rm d}g}{{\\rm d}x} \\\\ \\frac{{\\rm d}^2(f\\circ g)}{{\\rm d}x^2} &= \\frac{{\\rm d}^2f}{{\\rm d}g^2}(\\frac{{\\rm d}g}{{\\rm d}x})^2+\\frac{{\\rm d}f}{{\\rm d}g}\\frac{{\\rm d}^2g}{{\\rm d}x^2} \\\\ \\frac{{\\rm d}^3(f\\circ g)}{{\\rm d}x^3} &= \\frac{{\\rm d}^3f}{{\\rm d}g^3} (\\frac{{\\rm d}g}{{\\rm d}x})^3+3\\frac{{\\rm d}^2f}{{\\rm d}g^2}\\frac{{\\rm d}g}{{\\rm d}x}\\frac{{\\rm d}^2g}{{\\rm d}x^2}+\\frac{{\\rm d}f}{{\\rm d}g}\\frac{{\\rm d}^3g}{{\\rm d}x^3} \\end{aligned} \\] The spatial derivative operators in 3D \\(\\nabla\\) \u7b97\u5b50\u7684\u4e09\u4e2a\u8bed\u4e49: \\[\\nabla=\\boldsymbol{i}\\frac{\\partial}{\\partial x}+\\boldsymbol{j}\\frac{\\partial}{\\partial y}+\\boldsymbol{k}\\frac{\\partial}{\\partial z}\\] \u68af\u5ea6Gradient \uff1a\u4f5c\u7528\u4e8e \u6807\u91cf \\(f(x, y, z)\\) \u5f97\u5230 \u77e2\u91cf \u3002 \\(\\mathbb{R}^1\\rightarrow\\mathbb{R}^3, \\nabla\\) \\[grad\\ f=\\nabla f=(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y}, \\frac{\\partial f}{\\partial z})\\] \u4f5c\u7528\u4e8e\u5f20\u91cf\u5219\u5f20\u91cfrank+1 \\[\\nabla\\boldsymbol{v}=\\frac{\\partial v_i}{\\partial x_j}\\boldsymbol{e}_i\\boldsymbol{e}_j=v_{i,j} \\] \u6563\u5ea6Divergence \uff1a\u4f5c\u7528\u4e8e \u77e2\u91cf \\((f_x, f_y, f_z)\\) \u5f97\u5230 \u6807\u91cf \u3002 \\(\\mathbb{R}^3\\rightarrow\\mathbb{R}^1, \\nabla\\cdot\\) \\[div\\ \\boldsymbol{f}=\\nabla\\cdot \\boldsymbol{f}=\\frac{\\partial f_x}{\\partial x} + \\frac{\\partial f_y}{\\partial y} + \\frac{\\partial f_z}{\\partial z}\\] \u65cb\u5ea6Curl \uff1a\u4f5c\u7528\u4e8e \u77e2\u91cf \\((f_x, f_y, f_z)\\) \u5f97\u5230 \u77e2\u91cf \u3002 \\(\\mathbb{R}^3\\rightarrow\\mathbb{R}^3, \\nabla\\times\\) \\[curl\\ \\boldsymbol{f}=\\nabla\\times\\boldsymbol{f}=\\begin{vmatrix} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}\\\\ f_x &f_y &f_z \\end{vmatrix}=(\\frac{\\partial f_z}{\\partial y}-\\frac{\\partial f_y}{\\partial z}, \\frac{\\partial f_x}{\\partial z}-\\frac{\\partial f_z}{\\partial x}, \\frac{\\partial f_y}{\\partial x}-\\frac{\\partial f_x}{\\partial y})\\] \u62c9\u666e\u62c9\u65afLaplace : \u68af\u5ea6\u7684\u6563\u5ea6\uff0c\u4f5c\u7528\u4e8e\u4efb\u610f\u7ef4\u5ea6\u7684\u53d8\u91cf\u3002 \\(\\mathbb{R}^n\\rightarrow\\mathbb{R}^n, \\nabla \\cdot \\nabla=\\nabla^2\\) \\[laplace\\ f=div(grad\\ f)=\\nabla^2f=\\frac{\\partial^2 f}{\\partial x^2} + \\frac{\\partial^2 f}{\\partial y^2} + \\frac{\\partial^2 f}{\\partial z^2}\\] Material derivative For a scalar field: \\[\\frac{{\\rm D}f}{{\\rm D}t}=\\frac{\\partial f}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla f,\\ r=f_{,t}+v_if_{,i}\\] And for a vector field: \\[\\frac{{\\rm D}\\boldsymbol{f}}{{\\rm D}t}=\\frac{\\partial \\boldsymbol{f}}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla \\boldsymbol{f},\\ r_i=f_{i,t}+v_kf_{i,k}\\] This is material derivative in fluid mechanics, total derivative in math. \u6570\u5b66\u4e0a\u7684\u5168\u5bfc\u6570\uff0c\u6d41\u4f53\u529b\u5b66\u4e2d\u7684\u7269\u8d28\u5bfc\u6570\u3001\u968f\u4f53\u5bfc\u6570\uff0c\u4e3a\u6d41\u4f53\u8d28\u70b9\u5728\u8fd0\u52a8\u65f6\u6240\u5177\u6709\u7684\u7269\u7406\u91cf\u5bf9\u65f6\u95f4\u7684\u5168\u5bfc\u6570\u3002 Wiki : In continuum mechanics, the material derivative describes the time rate of change of some physical quantity (like heat or momentum) of a material element that is subjected to a space-and-time-dependent macroscopic velocity field. The material derivative can serve as a link between Eulerian and Lagrangian descriptions of continuum deformation. \u8fd0\u52a8\u7684\u6d41\u4f53\u5fae\u56e2\u7684\u7269\u7406\u91cf\u968f\u65f6\u95f4\u7684\u53d8\u5316\u7387\uff0c\u5b83\u7b49\u4e8e\u8be5\u7269\u7406\u91cf\u7531\u5f53\u5730\u65f6\u95f4\u53d8\u5316\u6240\u5f15\u8d77\u7684\u53d8\u5316\u7387\u4e0e\u7531\u6d41\u4f53\u5bf9\u6d41\u5f15\u8d77\u7684\u53d8\u5316\u7387\u7684\u548c\u3002 \u4ece\u504f\u5bfc\u6570\u5168\u5fae\u5206\u7684\u6461\u5ff5\u51fa\u53d1\uff0c\u5bc6\u5ea6\u53d8\u5316\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5bc6\u5ea6\u5206\u5e03\u51fd\u6570\uff08\u5bc6\u5ea6\u573a\uff09\u7684\u65f6\u95f4\u504f\u5bfc\u6570\u9879\uff08\u4e0d\u5b9a\u5e38\uff09\u548c\u7a7a\u95f4\u504f\u5bfc\u6570\u9879\uff08\u7a7a\u95f4\u4e0d\u5747\u5300\uff09\u7684\u548c\u3002\u65f6\u95f4\u504f\u5bfc\u9879\u53eb\u5c40\u90e8\u5bfc\u6570\u6216\u5c31\u5730\u5bfc\u6570\u3002\u7a7a\u95f4\u504f\u5bfc\u9879\u53eb\u4f4d\u53d8\u5bfc\u6570\u6216\u5bf9\u6d41\u5bfc\u6570\u3002 \u4e2d\u79d1\u9662\u7684\u674e\u65b0\u4eae\u7814\u7a76\u5458\u7ed9\u51fa\u4e86\u4e00\u4e2a\u66f4\u52a0\u5f62\u8c61\u7684\u4f8b\u5b50\uff1a\u9ad8\u94c1\u7684\u7535\u5b50\u663e\u793a\u5c4f\u4e0a\u4f1a\u5b9e\u65f6\u663e\u793a\u8f66\u5916\u7684\u6e29\u5ea6\uff0c\u5982\u679c\u6211\u4eec\u5c06\u9ad8\u94c1\u770b\u4f5c\u662f\u4e00\u4e2a\u6d41\u4f53\u5fae\u5143\uff0c\u5b83\u65e9\u4e0a\u4ece\u5317\u4eac\u51fa\u53d1\uff0c\u4e2d\u5348\u5230\u8fbe\u4e0a\u6d77\uff0c\u663e\u793a\u5c4f\u4e0a\u8bb0\u5f55\u7684\u5ba4\u5916\u6e29\u5ea6\u7684\u53d8\u5316\u5c31\u662f\u7269\u8d28\u5bfc\u6570\uff0c\u5b83\u5305\u542b\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u4ece\u5317\u4eac\u5230\u4e0a\u6d77\u7684\u5730\u7406\u4f4d\u7f6e\u7684\u53d8\u5316\u6240\u5e26\u6765\u7684\u6e29\u5ea6\u53d8\u5316\uff0c\u5373\u5bf9\u6d41\u5bfc\u6570\uff1b\u4e8c\u662f\u7531\u4e8e\u65e9\u4e0a\u5230\u4e2d\u5348\u7531\u4e8e\u65f6\u95f4\u4e0d\u540c\u800c\u5f15\u8d77\u7684\u6e29\u5ea6\u53d8\u5316\uff0c\u5373\u5f53\u5730\u5bfc\u6570\u3002) @Koschier2019 However, given the same field quantity once described in Eulerian coordinates \\(f^E(t, \\boldsymbol{x})\\) and Lagrangian coordinates \\(f^L(t)\\) the material derivative has the following explicit forms: \\[\\frac{{\\rm D}f^E}{{\\rm D}t}=\\frac{\\partial f^E}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla f^E\\ and\\ \\frac{{\\rm D}f^L}{{\\rm D}t}=\\frac{\\partial f^L}{\\partial t} \\] The second term of the material derivative for Eulerian coordinates is referred to as convection term or self-advection term. As opposed to some people's beliefs, the convection term is non-existent when a quantity is described in Lagrangian coordinates. Fluid and solid Solid : Applied tengential force/area (or shear stress) \\(\\tau\\) produces a proportional deformation angle (or strain) \\(\\theta\\) . The constant of proportionality \\(G\\) is called the elastic modulus and has the units of \\(force/area\\) . \\[\\tau=G\\theta\\] Fluid : Applied shear stress \\(\\tau\\) produces a proportional continuously-increasing deformation (or strain rate) \\(\\dot\\theta\\) . The constant of proportionality \\(\\mu\\) is called the viscosity and has the units of \\(force \\times time/area\\) . \\[\\tau=\\mu\\dot\\theta\\] Strain and strain-rate tensor Strain For strain , tensorial shear terms are written as \\(\\epsilon_{ij}\\) and are one-half of \\(\\gamma_{ij}\\) ( engineering shear strain ) such that \\(\\gamma_{ij}=2\\epsilon_{ij}, i\\neq j\\) . The true shear strain is defined as the change in the angle (in radians) between two material line elements initially perpendicular to each other in the undeformed or initial configuration. The engineering shear strain is defined as the tangent of that angle, and is equal to the length of deformation at its maximum divided by the perpendicular length in the plane of force application which sometimes makes it easier to calculate. \\[\\epsilon_{Eng}=\\frac{L_F-L_0}{L_0}=\\frac{\\Delta L}{L_0}\\] \\[\\epsilon_{True}=\\int^{L_F}_{L_0}\\frac{{\\rm d}L}{L}=\\ln(\\frac{L_F}{L_0})\\] and \\[\\epsilon_{True}=\\ln(1+\\epsilon_{Eng})\\] Small strain The best defination of small strain is based on the deformation gradient, in terms of displacements \\(\\boldsymbol{u}=\\boldsymbol{x}-\\boldsymbol{x}_0\\) , it can be written as: \\[\\epsilon_{ij}=\\frac{1}{2}(u_{i,j}+u_{j,i})\\] or \\[\\boldsymbol{\\epsilon}=\\frac{1}{2}(\\boldsymbol{F}+\\boldsymbol{F}^T)-\\boldsymbol{I} \\] where \\(\\boldsymbol{F}\\) is the deformation gradient , which \\(F_{ij}=x_{i,j}=\\delta_{ij}+u_{i,j}\\) . And \\(\\boldsymbol{F}\\) is a Lagrangian quantity. But it is limited to applications involving small rotations and can only be used to calculate small strains without rotation or within very small rotation (like 5\u00b0 may cause 3% differences). \\(\\boldsymbol{U}\u2212\\boldsymbol{I}\\) strain In fact, a perfectly acceptable definition of strain, even for very large strains and rotations will be: \\[\\boldsymbol{\\epsilon}=\\boldsymbol{U}-\\boldsymbol{I}\\] where \\(\\boldsymbol{U}\\) is the stretch tensor and independent of rigid body rotation (because they are all contained in \\(\\boldsymbol{R}\\) ). Green strain tensor But as \\(\\boldsymbol{U}\\) is very difficult to compute, Green strain tensor is needed that is easy to calculate and is not corrupted by rigid body rotations: \\[E_{ij}=\\frac{1}{2}(F_{ki}F_{kj}-\\delta_{ij})=\\frac{1}{2}(u_{i,j}+u_{j,i}+u_{k,i}u_{k,j})\\] or \\[\\boldsymbol{E}=\\frac{1}{2}(\\boldsymbol{F}^T\\cdot\\boldsymbol{F}-\\boldsymbol{I})\\] The terms can be grouped into Green strain = Small strain terms + Quadratic terms . The quadratic terms are what gives the Green strain tensor its rotation independence. For smaller strains still, the Green strain tensor and \\(\\boldsymbol{U}\u2212\\boldsymbol{I}\\) will become very close to each other, regardless of the level of rotation. But the quadratic terms will affect actual strains when the strains are large. Hydrostatic strain Hydrostatic strain is simply the average of the three normal strains of any strain tensor. \\[\\epsilon_H=\\frac{1}{3}\\epsilon_{kk}\\] Note that hydrostatic strain is in fact a mathematical construct more than a direct physical measure of volume and its change. After all, it is the determinant of the deformation gradient that is the true measure of volume change, and hydrostatic strain is only a convenient approximation of that when the strains are small. Hydrostatic strain is only an approximation of volume change, not an exact measure. At large strains, hydrostatic strain loses its link to volume because it is no longer an approximation of its change. It is reduced to a mere mathematical property of a strain tensor. Volumetric strain The volumetric strain is defined from the volume change as: \\[\\epsilon_{V}=\\frac{\\Delta V}{V_0}\\] For all strains, there is always the relationship between volumetric strain and principal strain: \\[\\epsilon_{V}=(1+\\epsilon_1)(1+\\epsilon_2)(1+\\epsilon_3)=\\det(\\boldsymbol{F})\\] Here \\(\\det(\\boldsymbol{F})\\) gives a special symbol, \\(J\\) , and a special name, the Jacobian . And for small strains, the relationship between volumetric strain and hydrostatic strain is: \\[\\epsilon_{V}=\\epsilon_1+\\epsilon_2+\\epsilon_3=\\epsilon_H\\] Deviatoric strain Deviatoric strain means all the deformations that cause a shape change without changing the volume if the strains are small. \\[e_{ij}=\\epsilon_{ij}'=\\epsilon_{ij}-\\frac{1}{3}\\delta_{ij}\\epsilon_{kk} \\] Strain-rate tensor @ wiki: strain-rate tensor In continuum mechanics, the gradient of the velocity \\(\\nabla\\boldsymbol{v}\\) is a second-order tensor: \\[\\boldsymbol{L}=\\nabla\\boldsymbol{v}=\\frac{\\partial\\boldsymbol{v}}{\\partial\\boldsymbol{x}}=\\left[\\begin{matrix} \\frac{\\partial v_x}{\\partial x} &\\frac{\\partial v_x}{\\partial y} &\\frac{\\partial v_x}{\\partial z}\\\\ \\frac{\\partial v_y}{\\partial x} &\\frac{\\partial v_y}{\\partial y} &\\frac{\\partial v_y}{\\partial z}\\\\ \\frac{\\partial v_z}{\\partial x} &\\frac{\\partial v_z}{\\partial y} &\\frac{\\partial v_z}{\\partial z} \\end{matrix}\\right]\\] or \\[L_{ij}=\\frac{\\partial v_i}{\\partial x_j}=v_{i,j} \\] \\(\\boldsymbol{L}\\) is an Eulerian quantity and can be decomposed into the sum of a symmetric matrix \\(\\boldsymbol{E}\\) and a skew-symmetric matrix \\(\\boldsymbol{W}\\) : \\[\\boldsymbol{E}=\\frac{1}{2}(\\boldsymbol{L}+\\boldsymbol{L}^T)\\] \\[\\boldsymbol{W}=\\frac{1}{2}(\\boldsymbol{L}-\\boldsymbol{L}^T)\\] \\(\\boldsymbol{E}\\) is called the strain rate tensor or the rate of deformation tensor and describes the rate of stretching and shearing. \\(\\boldsymbol{W}\\) is called the spin tensor and describes the rate of rotation. Also, the strain-rate tensor can be noted as \\(\\dot{\\boldsymbol{\\epsilon}}\\) or \\(\\dot{\\epsilon}_{ij}\\) , and the spin rate tensor as \\(\\dot{\\boldsymbol{\\omega}}\\) or \\(\\dot{\\omega}_{ij}\\) . And the rate of deformation equals the rate of true strain : \\(\\int E{\\rm d}t=\\epsilon_{True}\\) and \\(E=\\dot{\\epsilon}_{True}\\) . However, things get complicated when the rate of deformation tensor is integrated over time to obtain true strain while rigid body rotations are present. But we can compute \\(\\boldsymbol{\\epsilon}_{True}=\\int \\boldsymbol{R}^T\\cdot\\boldsymbol{E}\\cdot\\boldsymbol{R}{\\rm d}t\\) instead of directly calculate \\(\\int \\boldsymbol{E}{\\rm d}t\\) when rotations are present. This gives a true strain result that is in the initial reference orientation. For compressible materials, since the ratio of initial to final volume is \\(\\epsilon_V^{True}\\) : \\[\\epsilon_1^{True}+\\epsilon_2^{True}+\\epsilon_3^{True}=\\epsilon_V^{True}\\] Also: \\[\\dot{\\epsilon}_1^{True}+\\dot{\\epsilon}_2^{True}+\\dot{\\epsilon}_3^{True}=\\dot{\\epsilon}_V^{True}\\] which means: \\[E_{kk}=\\dot{\\epsilon}_V^{True}\\] For incompressible materials, just take \\(\\epsilon_V^{True}=0\\) ( \\(V_F/V_0=1\\) ) and \\(\\dot{\\epsilon}_V^{True}=0\\) . And this above applies for finite strains, not just infinitesimal ones, and not just in principal orientations. The strain-rate tensor describes the rate of change of the deformation of a material in the neighborhood of a certain point, at a certain moment of time. It can be defined as the derivative of the strain tensor with respect to time, or as the symmetric component of the Jacobian matrix of the flow velocity. Stress Stress: \\(\\boldsymbol{\\sigma}\\) or \\(\\sigma_{ij}\\) (Stretch for positive and Compress for negative) Principal stress: \\(\\sigma_1\\) , \\(\\sigma_2\\) and \\(\\sigma_3\\) Hydrostatic stress: \\(\\sigma_H=\\sigma_{mm}/3\\) Hydrostatic pressure in geomechanic: \\(p=-\\sigma_H\\) Deviatoric stress: \\(\\boldsymbol{s}=\\boldsymbol{\\sigma}'=\\boldsymbol{\\sigma}-\\sigma_H\\boldsymbol{I}\\) or \\(s_{ij}=\\sigma'_{ij}=\\sigma_{ij}-\\delta_{ij}\\sigma_H\\) Invariants Here we difine the firse invariant of the stress tensor \\(I_1\\) and the second invariant of the deviatoric stress tensor \\(J_2\\) : \\[I_1 = \\sigma_{xx}+\\sigma_{yy}+\\sigma_{zz}\\ ,\\ J_2 = \\frac{1}{2}\\boldsymbol{s}:\\boldsymbol{s}\\] where \\(\\boldsymbol{s}\\) is the deviatoric stress tensor : \\(\\boldsymbol{s} = \\boldsymbol{\\sigma}+p\\boldsymbol{I}\\) and \\(\\boldsymbol{I}\\) is the identity matrix. \\(\\boldsymbol{s}:\\boldsymbol{s}\\) means \\(s_{ij}s_{ij}\\) . Hooke's Law Hooke's Law can be written in matrix notation as: \\[\\boldsymbol{\\epsilon}=\\frac{1}{E}[(1+\\nu)\\boldsymbol{\\sigma}-\\nu\\boldsymbol{I}{\\rm tr}(\\boldsymbol{\\sigma})]\\] and in tensor notation as: \\[\\epsilon_{ij}=\\frac{1}{E}[(1+\\nu)\\sigma_{ij}-\\nu\\delta_{ij}\\sigma_{kk}] \\] The inverting Hooke's Law: \\[\\sigma_{ij}=\\frac{E}{1+\\nu}[\\epsilon_{ij}+\\frac{\\nu}{1-2\\nu}\\delta_{ij}\\epsilon_{kk}] \\] In Hooke's Law , we have \\(\\tau_{xy}=G\\gamma_{xy}=2G\\epsilon_{xy}\\) and \\(\\epsilon_{xx}+\\epsilon_{yy}+\\epsilon_{zz}=\\epsilon_{V}=\\sigma_m/K=(\\sigma_{xx}+\\sigma_{yy}+\\sigma_{zz})/3K\\) . \\(E\\) is the elastic modulus or Young's modulus , \\(\\nu\\) is the Poisson's ratio , \\(G = E/2(1+\\nu)\\) is the shear modulus and \\(K = E/3(1-2\\nu)\\) is the elastic bulk modulus . And for stiffness tensor: \\[C_{ijkl}=\\frac{E}{1+\\nu}[\\frac{1}{2}(\\delta_{ik}\\delta_{jl}+\\delta_{jk}\\delta_{il})+\\frac{\\nu}{1-2\\nu}\\delta_{ij}\\delta_{kl}]\\] The deviatoric stress \\(\\boldsymbol{s}=\\boldsymbol{\\sigma}'\\) and strain \\(\\boldsymbol{\\epsilon}'\\) are directly proportional to each other: \\[s_{ij}=2G\\epsilon'_{ij}\\] Other mathematical components \\(\\dot{\\#}\\) - the accent-dot indicates the time derivative of the vector/tensor quantities. @Bui2021, 3.2.1.1. p15 The speed of sound: 343m/s in air, 1481m/s in water, 5120m/s in iron.","title":"Basic knowledge"},{"location":"basic/#basic-mathematics-and-mechanics","text":"","title":"Basic mathematics and mechanics"},{"location":"basic/#tensor","text":"Tensors are simply mathematical objects that can be used to describe physical properties, a tensor is something that transforms like a tensor. The laws of physics described in tensor automatically guarantee this property of being invariant with the reference frame. The rank (or order) of a tensor is defined by the number of directions required to describe it. A scalar is a 0 rank tensor, a vector is a first rank tensor, a matrix is a two rank tensor. In general, in a 3D space, an \\(n^{th}\\) rank tensor can be described by \\(3^n\\) coefficients.","title":"Tensor"},{"location":"basic/#einstein-summation-convention","text":"Einstein summation convention is a notational convention that implies summation over a set of indexed terms in a formula, thus achieving brevity. * Summation index (dummy index) : an index that is summed over. \\(i\\) in \\(y=\\sum_{i=1}^3c_ix_i=c_1x_1+c_2x_2+c_3x_3=c_ix_i\\) * A dummy index can only appear twice in one item. If there are more dummy indexes in one item, it should be added a summation symbol: \\(a_1b_1c_1+a_2b_2c_2+a_3b_3c_3=\\sum_{i=1}^3a_ib_ic_i\\) not just \\(a_ib_ic_i\\) * Free index : an index that is not summed over. \\(j\\) in \\(v_i=\\sum_{j=1}^3=a_ib_jx_j=a_ib_1x_1+a_ib_2x_2+a_ib_3x_3\\) * A free index cannot be written twice in one item. Unless otherwise specified, \\(i,j,k,...\\) represent 3D index, and \\(\\alpha,\\beta,\\gamma,...\\) represent 2D index: \\(\\boldsymbol{a}\\cdot\\boldsymbol{b}=a_ib_i=a_1b_1+a_2b_2+a_3b_3\\) and \\(\\boldsymbol{a}\\cdot\\boldsymbol{b}=a_{\\alpha}b_{\\alpha}=a_1b_1+a_2b_2\\)","title":"Einstein summation convention"},{"location":"basic/#kronecker-delta","text":"","title":"Kronecker delta"},{"location":"basic/#levi-civita-symbol","text":"","title":"Levi-Civita symbol"},{"location":"basic/#tensor-equation-algebra","text":"","title":"Tensor equation / algebra"},{"location":"basic/#some-commonly-used-special-tensors","text":"","title":"Some commonly used special tensors"},{"location":"basic/#chain-rule-in-derivative","text":"\\[ \\begin{aligned} h &= f(g(x)) \\\\ h &= (f\\circ g)(x) \\\\ h'(x) &= f'(g(x))g'(x) \\\\ \\frac{{\\rm d}(f\\circ g)}{{\\rm d}x} &= \\frac{{\\rm d}f}{{\\rm d}g}\\frac{{\\rm d}g}{{\\rm d}x} \\\\ \\frac{{\\rm d}^2(f\\circ g)}{{\\rm d}x^2} &= \\frac{{\\rm d}^2f}{{\\rm d}g^2}(\\frac{{\\rm d}g}{{\\rm d}x})^2+\\frac{{\\rm d}f}{{\\rm d}g}\\frac{{\\rm d}^2g}{{\\rm d}x^2} \\\\ \\frac{{\\rm d}^3(f\\circ g)}{{\\rm d}x^3} &= \\frac{{\\rm d}^3f}{{\\rm d}g^3} (\\frac{{\\rm d}g}{{\\rm d}x})^3+3\\frac{{\\rm d}^2f}{{\\rm d}g^2}\\frac{{\\rm d}g}{{\\rm d}x}\\frac{{\\rm d}^2g}{{\\rm d}x^2}+\\frac{{\\rm d}f}{{\\rm d}g}\\frac{{\\rm d}^3g}{{\\rm d}x^3} \\end{aligned} \\]","title":"Chain rule in derivative"},{"location":"basic/#the-spatial-derivative-operators-in-3d","text":"\\(\\nabla\\) \u7b97\u5b50\u7684\u4e09\u4e2a\u8bed\u4e49: \\[\\nabla=\\boldsymbol{i}\\frac{\\partial}{\\partial x}+\\boldsymbol{j}\\frac{\\partial}{\\partial y}+\\boldsymbol{k}\\frac{\\partial}{\\partial z}\\] \u68af\u5ea6Gradient \uff1a\u4f5c\u7528\u4e8e \u6807\u91cf \\(f(x, y, z)\\) \u5f97\u5230 \u77e2\u91cf \u3002 \\(\\mathbb{R}^1\\rightarrow\\mathbb{R}^3, \\nabla\\) \\[grad\\ f=\\nabla f=(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y}, \\frac{\\partial f}{\\partial z})\\] \u4f5c\u7528\u4e8e\u5f20\u91cf\u5219\u5f20\u91cfrank+1 \\[\\nabla\\boldsymbol{v}=\\frac{\\partial v_i}{\\partial x_j}\\boldsymbol{e}_i\\boldsymbol{e}_j=v_{i,j} \\] \u6563\u5ea6Divergence \uff1a\u4f5c\u7528\u4e8e \u77e2\u91cf \\((f_x, f_y, f_z)\\) \u5f97\u5230 \u6807\u91cf \u3002 \\(\\mathbb{R}^3\\rightarrow\\mathbb{R}^1, \\nabla\\cdot\\) \\[div\\ \\boldsymbol{f}=\\nabla\\cdot \\boldsymbol{f}=\\frac{\\partial f_x}{\\partial x} + \\frac{\\partial f_y}{\\partial y} + \\frac{\\partial f_z}{\\partial z}\\] \u65cb\u5ea6Curl \uff1a\u4f5c\u7528\u4e8e \u77e2\u91cf \\((f_x, f_y, f_z)\\) \u5f97\u5230 \u77e2\u91cf \u3002 \\(\\mathbb{R}^3\\rightarrow\\mathbb{R}^3, \\nabla\\times\\) \\[curl\\ \\boldsymbol{f}=\\nabla\\times\\boldsymbol{f}=\\begin{vmatrix} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}\\\\ f_x &f_y &f_z \\end{vmatrix}=(\\frac{\\partial f_z}{\\partial y}-\\frac{\\partial f_y}{\\partial z}, \\frac{\\partial f_x}{\\partial z}-\\frac{\\partial f_z}{\\partial x}, \\frac{\\partial f_y}{\\partial x}-\\frac{\\partial f_x}{\\partial y})\\] \u62c9\u666e\u62c9\u65afLaplace : \u68af\u5ea6\u7684\u6563\u5ea6\uff0c\u4f5c\u7528\u4e8e\u4efb\u610f\u7ef4\u5ea6\u7684\u53d8\u91cf\u3002 \\(\\mathbb{R}^n\\rightarrow\\mathbb{R}^n, \\nabla \\cdot \\nabla=\\nabla^2\\) \\[laplace\\ f=div(grad\\ f)=\\nabla^2f=\\frac{\\partial^2 f}{\\partial x^2} + \\frac{\\partial^2 f}{\\partial y^2} + \\frac{\\partial^2 f}{\\partial z^2}\\]","title":"The spatial derivative operators in 3D"},{"location":"basic/#material-derivative","text":"For a scalar field: \\[\\frac{{\\rm D}f}{{\\rm D}t}=\\frac{\\partial f}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla f,\\ r=f_{,t}+v_if_{,i}\\] And for a vector field: \\[\\frac{{\\rm D}\\boldsymbol{f}}{{\\rm D}t}=\\frac{\\partial \\boldsymbol{f}}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla \\boldsymbol{f},\\ r_i=f_{i,t}+v_kf_{i,k}\\] This is material derivative in fluid mechanics, total derivative in math. \u6570\u5b66\u4e0a\u7684\u5168\u5bfc\u6570\uff0c\u6d41\u4f53\u529b\u5b66\u4e2d\u7684\u7269\u8d28\u5bfc\u6570\u3001\u968f\u4f53\u5bfc\u6570\uff0c\u4e3a\u6d41\u4f53\u8d28\u70b9\u5728\u8fd0\u52a8\u65f6\u6240\u5177\u6709\u7684\u7269\u7406\u91cf\u5bf9\u65f6\u95f4\u7684\u5168\u5bfc\u6570\u3002 Wiki : In continuum mechanics, the material derivative describes the time rate of change of some physical quantity (like heat or momentum) of a material element that is subjected to a space-and-time-dependent macroscopic velocity field. The material derivative can serve as a link between Eulerian and Lagrangian descriptions of continuum deformation. \u8fd0\u52a8\u7684\u6d41\u4f53\u5fae\u56e2\u7684\u7269\u7406\u91cf\u968f\u65f6\u95f4\u7684\u53d8\u5316\u7387\uff0c\u5b83\u7b49\u4e8e\u8be5\u7269\u7406\u91cf\u7531\u5f53\u5730\u65f6\u95f4\u53d8\u5316\u6240\u5f15\u8d77\u7684\u53d8\u5316\u7387\u4e0e\u7531\u6d41\u4f53\u5bf9\u6d41\u5f15\u8d77\u7684\u53d8\u5316\u7387\u7684\u548c\u3002 \u4ece\u504f\u5bfc\u6570\u5168\u5fae\u5206\u7684\u6461\u5ff5\u51fa\u53d1\uff0c\u5bc6\u5ea6\u53d8\u5316\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5bc6\u5ea6\u5206\u5e03\u51fd\u6570\uff08\u5bc6\u5ea6\u573a\uff09\u7684\u65f6\u95f4\u504f\u5bfc\u6570\u9879\uff08\u4e0d\u5b9a\u5e38\uff09\u548c\u7a7a\u95f4\u504f\u5bfc\u6570\u9879\uff08\u7a7a\u95f4\u4e0d\u5747\u5300\uff09\u7684\u548c\u3002\u65f6\u95f4\u504f\u5bfc\u9879\u53eb\u5c40\u90e8\u5bfc\u6570\u6216\u5c31\u5730\u5bfc\u6570\u3002\u7a7a\u95f4\u504f\u5bfc\u9879\u53eb\u4f4d\u53d8\u5bfc\u6570\u6216\u5bf9\u6d41\u5bfc\u6570\u3002 \u4e2d\u79d1\u9662\u7684\u674e\u65b0\u4eae\u7814\u7a76\u5458\u7ed9\u51fa\u4e86\u4e00\u4e2a\u66f4\u52a0\u5f62\u8c61\u7684\u4f8b\u5b50\uff1a\u9ad8\u94c1\u7684\u7535\u5b50\u663e\u793a\u5c4f\u4e0a\u4f1a\u5b9e\u65f6\u663e\u793a\u8f66\u5916\u7684\u6e29\u5ea6\uff0c\u5982\u679c\u6211\u4eec\u5c06\u9ad8\u94c1\u770b\u4f5c\u662f\u4e00\u4e2a\u6d41\u4f53\u5fae\u5143\uff0c\u5b83\u65e9\u4e0a\u4ece\u5317\u4eac\u51fa\u53d1\uff0c\u4e2d\u5348\u5230\u8fbe\u4e0a\u6d77\uff0c\u663e\u793a\u5c4f\u4e0a\u8bb0\u5f55\u7684\u5ba4\u5916\u6e29\u5ea6\u7684\u53d8\u5316\u5c31\u662f\u7269\u8d28\u5bfc\u6570\uff0c\u5b83\u5305\u542b\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u4ece\u5317\u4eac\u5230\u4e0a\u6d77\u7684\u5730\u7406\u4f4d\u7f6e\u7684\u53d8\u5316\u6240\u5e26\u6765\u7684\u6e29\u5ea6\u53d8\u5316\uff0c\u5373\u5bf9\u6d41\u5bfc\u6570\uff1b\u4e8c\u662f\u7531\u4e8e\u65e9\u4e0a\u5230\u4e2d\u5348\u7531\u4e8e\u65f6\u95f4\u4e0d\u540c\u800c\u5f15\u8d77\u7684\u6e29\u5ea6\u53d8\u5316\uff0c\u5373\u5f53\u5730\u5bfc\u6570\u3002) @Koschier2019 However, given the same field quantity once described in Eulerian coordinates \\(f^E(t, \\boldsymbol{x})\\) and Lagrangian coordinates \\(f^L(t)\\) the material derivative has the following explicit forms: \\[\\frac{{\\rm D}f^E}{{\\rm D}t}=\\frac{\\partial f^E}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla f^E\\ and\\ \\frac{{\\rm D}f^L}{{\\rm D}t}=\\frac{\\partial f^L}{\\partial t} \\] The second term of the material derivative for Eulerian coordinates is referred to as convection term or self-advection term. As opposed to some people's beliefs, the convection term is non-existent when a quantity is described in Lagrangian coordinates.","title":"Material derivative"},{"location":"basic/#fluid-and-solid","text":"Solid : Applied tengential force/area (or shear stress) \\(\\tau\\) produces a proportional deformation angle (or strain) \\(\\theta\\) . The constant of proportionality \\(G\\) is called the elastic modulus and has the units of \\(force/area\\) . \\[\\tau=G\\theta\\] Fluid : Applied shear stress \\(\\tau\\) produces a proportional continuously-increasing deformation (or strain rate) \\(\\dot\\theta\\) . The constant of proportionality \\(\\mu\\) is called the viscosity and has the units of \\(force \\times time/area\\) . \\[\\tau=\\mu\\dot\\theta\\]","title":"Fluid and solid"},{"location":"basic/#strain-and-strain-rate-tensor","text":"","title":"Strain and strain-rate tensor"},{"location":"basic/#strain","text":"For strain , tensorial shear terms are written as \\(\\epsilon_{ij}\\) and are one-half of \\(\\gamma_{ij}\\) ( engineering shear strain ) such that \\(\\gamma_{ij}=2\\epsilon_{ij}, i\\neq j\\) . The true shear strain is defined as the change in the angle (in radians) between two material line elements initially perpendicular to each other in the undeformed or initial configuration. The engineering shear strain is defined as the tangent of that angle, and is equal to the length of deformation at its maximum divided by the perpendicular length in the plane of force application which sometimes makes it easier to calculate. \\[\\epsilon_{Eng}=\\frac{L_F-L_0}{L_0}=\\frac{\\Delta L}{L_0}\\] \\[\\epsilon_{True}=\\int^{L_F}_{L_0}\\frac{{\\rm d}L}{L}=\\ln(\\frac{L_F}{L_0})\\] and \\[\\epsilon_{True}=\\ln(1+\\epsilon_{Eng})\\]","title":"Strain"},{"location":"basic/#small-strain","text":"The best defination of small strain is based on the deformation gradient, in terms of displacements \\(\\boldsymbol{u}=\\boldsymbol{x}-\\boldsymbol{x}_0\\) , it can be written as: \\[\\epsilon_{ij}=\\frac{1}{2}(u_{i,j}+u_{j,i})\\] or \\[\\boldsymbol{\\epsilon}=\\frac{1}{2}(\\boldsymbol{F}+\\boldsymbol{F}^T)-\\boldsymbol{I} \\] where \\(\\boldsymbol{F}\\) is the deformation gradient , which \\(F_{ij}=x_{i,j}=\\delta_{ij}+u_{i,j}\\) . And \\(\\boldsymbol{F}\\) is a Lagrangian quantity. But it is limited to applications involving small rotations and can only be used to calculate small strains without rotation or within very small rotation (like 5\u00b0 may cause 3% differences).","title":"Small strain"},{"location":"basic/#boldsymboluboldsymboli-strain","text":"In fact, a perfectly acceptable definition of strain, even for very large strains and rotations will be: \\[\\boldsymbol{\\epsilon}=\\boldsymbol{U}-\\boldsymbol{I}\\] where \\(\\boldsymbol{U}\\) is the stretch tensor and independent of rigid body rotation (because they are all contained in \\(\\boldsymbol{R}\\) ).","title":"\\(\\boldsymbol{U}\u2212\\boldsymbol{I}\\) strain"},{"location":"basic/#green-strain-tensor","text":"But as \\(\\boldsymbol{U}\\) is very difficult to compute, Green strain tensor is needed that is easy to calculate and is not corrupted by rigid body rotations: \\[E_{ij}=\\frac{1}{2}(F_{ki}F_{kj}-\\delta_{ij})=\\frac{1}{2}(u_{i,j}+u_{j,i}+u_{k,i}u_{k,j})\\] or \\[\\boldsymbol{E}=\\frac{1}{2}(\\boldsymbol{F}^T\\cdot\\boldsymbol{F}-\\boldsymbol{I})\\] The terms can be grouped into Green strain = Small strain terms + Quadratic terms . The quadratic terms are what gives the Green strain tensor its rotation independence. For smaller strains still, the Green strain tensor and \\(\\boldsymbol{U}\u2212\\boldsymbol{I}\\) will become very close to each other, regardless of the level of rotation. But the quadratic terms will affect actual strains when the strains are large.","title":"Green strain tensor"},{"location":"basic/#hydrostatic-strain","text":"Hydrostatic strain is simply the average of the three normal strains of any strain tensor. \\[\\epsilon_H=\\frac{1}{3}\\epsilon_{kk}\\] Note that hydrostatic strain is in fact a mathematical construct more than a direct physical measure of volume and its change. After all, it is the determinant of the deformation gradient that is the true measure of volume change, and hydrostatic strain is only a convenient approximation of that when the strains are small. Hydrostatic strain is only an approximation of volume change, not an exact measure. At large strains, hydrostatic strain loses its link to volume because it is no longer an approximation of its change. It is reduced to a mere mathematical property of a strain tensor.","title":"Hydrostatic strain"},{"location":"basic/#volumetric-strain","text":"The volumetric strain is defined from the volume change as: \\[\\epsilon_{V}=\\frac{\\Delta V}{V_0}\\] For all strains, there is always the relationship between volumetric strain and principal strain: \\[\\epsilon_{V}=(1+\\epsilon_1)(1+\\epsilon_2)(1+\\epsilon_3)=\\det(\\boldsymbol{F})\\] Here \\(\\det(\\boldsymbol{F})\\) gives a special symbol, \\(J\\) , and a special name, the Jacobian . And for small strains, the relationship between volumetric strain and hydrostatic strain is: \\[\\epsilon_{V}=\\epsilon_1+\\epsilon_2+\\epsilon_3=\\epsilon_H\\]","title":"Volumetric strain"},{"location":"basic/#deviatoric-strain","text":"Deviatoric strain means all the deformations that cause a shape change without changing the volume if the strains are small. \\[e_{ij}=\\epsilon_{ij}'=\\epsilon_{ij}-\\frac{1}{3}\\delta_{ij}\\epsilon_{kk} \\]","title":"Deviatoric strain"},{"location":"basic/#strain-rate-tensor","text":"@ wiki: strain-rate tensor In continuum mechanics, the gradient of the velocity \\(\\nabla\\boldsymbol{v}\\) is a second-order tensor: \\[\\boldsymbol{L}=\\nabla\\boldsymbol{v}=\\frac{\\partial\\boldsymbol{v}}{\\partial\\boldsymbol{x}}=\\left[\\begin{matrix} \\frac{\\partial v_x}{\\partial x} &\\frac{\\partial v_x}{\\partial y} &\\frac{\\partial v_x}{\\partial z}\\\\ \\frac{\\partial v_y}{\\partial x} &\\frac{\\partial v_y}{\\partial y} &\\frac{\\partial v_y}{\\partial z}\\\\ \\frac{\\partial v_z}{\\partial x} &\\frac{\\partial v_z}{\\partial y} &\\frac{\\partial v_z}{\\partial z} \\end{matrix}\\right]\\] or \\[L_{ij}=\\frac{\\partial v_i}{\\partial x_j}=v_{i,j} \\] \\(\\boldsymbol{L}\\) is an Eulerian quantity and can be decomposed into the sum of a symmetric matrix \\(\\boldsymbol{E}\\) and a skew-symmetric matrix \\(\\boldsymbol{W}\\) : \\[\\boldsymbol{E}=\\frac{1}{2}(\\boldsymbol{L}+\\boldsymbol{L}^T)\\] \\[\\boldsymbol{W}=\\frac{1}{2}(\\boldsymbol{L}-\\boldsymbol{L}^T)\\] \\(\\boldsymbol{E}\\) is called the strain rate tensor or the rate of deformation tensor and describes the rate of stretching and shearing. \\(\\boldsymbol{W}\\) is called the spin tensor and describes the rate of rotation. Also, the strain-rate tensor can be noted as \\(\\dot{\\boldsymbol{\\epsilon}}\\) or \\(\\dot{\\epsilon}_{ij}\\) , and the spin rate tensor as \\(\\dot{\\boldsymbol{\\omega}}\\) or \\(\\dot{\\omega}_{ij}\\) . And the rate of deformation equals the rate of true strain : \\(\\int E{\\rm d}t=\\epsilon_{True}\\) and \\(E=\\dot{\\epsilon}_{True}\\) . However, things get complicated when the rate of deformation tensor is integrated over time to obtain true strain while rigid body rotations are present. But we can compute \\(\\boldsymbol{\\epsilon}_{True}=\\int \\boldsymbol{R}^T\\cdot\\boldsymbol{E}\\cdot\\boldsymbol{R}{\\rm d}t\\) instead of directly calculate \\(\\int \\boldsymbol{E}{\\rm d}t\\) when rotations are present. This gives a true strain result that is in the initial reference orientation. For compressible materials, since the ratio of initial to final volume is \\(\\epsilon_V^{True}\\) : \\[\\epsilon_1^{True}+\\epsilon_2^{True}+\\epsilon_3^{True}=\\epsilon_V^{True}\\] Also: \\[\\dot{\\epsilon}_1^{True}+\\dot{\\epsilon}_2^{True}+\\dot{\\epsilon}_3^{True}=\\dot{\\epsilon}_V^{True}\\] which means: \\[E_{kk}=\\dot{\\epsilon}_V^{True}\\] For incompressible materials, just take \\(\\epsilon_V^{True}=0\\) ( \\(V_F/V_0=1\\) ) and \\(\\dot{\\epsilon}_V^{True}=0\\) . And this above applies for finite strains, not just infinitesimal ones, and not just in principal orientations. The strain-rate tensor describes the rate of change of the deformation of a material in the neighborhood of a certain point, at a certain moment of time. It can be defined as the derivative of the strain tensor with respect to time, or as the symmetric component of the Jacobian matrix of the flow velocity.","title":"Strain-rate tensor"},{"location":"basic/#stress","text":"Stress: \\(\\boldsymbol{\\sigma}\\) or \\(\\sigma_{ij}\\) (Stretch for positive and Compress for negative) Principal stress: \\(\\sigma_1\\) , \\(\\sigma_2\\) and \\(\\sigma_3\\) Hydrostatic stress: \\(\\sigma_H=\\sigma_{mm}/3\\) Hydrostatic pressure in geomechanic: \\(p=-\\sigma_H\\) Deviatoric stress: \\(\\boldsymbol{s}=\\boldsymbol{\\sigma}'=\\boldsymbol{\\sigma}-\\sigma_H\\boldsymbol{I}\\) or \\(s_{ij}=\\sigma'_{ij}=\\sigma_{ij}-\\delta_{ij}\\sigma_H\\)","title":"Stress"},{"location":"basic/#invariants","text":"Here we difine the firse invariant of the stress tensor \\(I_1\\) and the second invariant of the deviatoric stress tensor \\(J_2\\) : \\[I_1 = \\sigma_{xx}+\\sigma_{yy}+\\sigma_{zz}\\ ,\\ J_2 = \\frac{1}{2}\\boldsymbol{s}:\\boldsymbol{s}\\] where \\(\\boldsymbol{s}\\) is the deviatoric stress tensor : \\(\\boldsymbol{s} = \\boldsymbol{\\sigma}+p\\boldsymbol{I}\\) and \\(\\boldsymbol{I}\\) is the identity matrix. \\(\\boldsymbol{s}:\\boldsymbol{s}\\) means \\(s_{ij}s_{ij}\\) .","title":"Invariants"},{"location":"basic/#hookes-law","text":"Hooke's Law can be written in matrix notation as: \\[\\boldsymbol{\\epsilon}=\\frac{1}{E}[(1+\\nu)\\boldsymbol{\\sigma}-\\nu\\boldsymbol{I}{\\rm tr}(\\boldsymbol{\\sigma})]\\] and in tensor notation as: \\[\\epsilon_{ij}=\\frac{1}{E}[(1+\\nu)\\sigma_{ij}-\\nu\\delta_{ij}\\sigma_{kk}] \\] The inverting Hooke's Law: \\[\\sigma_{ij}=\\frac{E}{1+\\nu}[\\epsilon_{ij}+\\frac{\\nu}{1-2\\nu}\\delta_{ij}\\epsilon_{kk}] \\] In Hooke's Law , we have \\(\\tau_{xy}=G\\gamma_{xy}=2G\\epsilon_{xy}\\) and \\(\\epsilon_{xx}+\\epsilon_{yy}+\\epsilon_{zz}=\\epsilon_{V}=\\sigma_m/K=(\\sigma_{xx}+\\sigma_{yy}+\\sigma_{zz})/3K\\) . \\(E\\) is the elastic modulus or Young's modulus , \\(\\nu\\) is the Poisson's ratio , \\(G = E/2(1+\\nu)\\) is the shear modulus and \\(K = E/3(1-2\\nu)\\) is the elastic bulk modulus . And for stiffness tensor: \\[C_{ijkl}=\\frac{E}{1+\\nu}[\\frac{1}{2}(\\delta_{ik}\\delta_{jl}+\\delta_{jk}\\delta_{il})+\\frac{\\nu}{1-2\\nu}\\delta_{ij}\\delta_{kl}]\\] The deviatoric stress \\(\\boldsymbol{s}=\\boldsymbol{\\sigma}'\\) and strain \\(\\boldsymbol{\\epsilon}'\\) are directly proportional to each other: \\[s_{ij}=2G\\epsilon'_{ij}\\]","title":"Hooke's Law"},{"location":"basic/#other-mathematical-components","text":"\\(\\dot{\\#}\\) - the accent-dot indicates the time derivative of the vector/tensor quantities. @Bui2021, 3.2.1.1. p15 The speed of sound: 343m/s in air, 1481m/s in water, 5120m/s in iron.","title":"Other mathematical components"},{"location":"codeframe/","text":"Code frame Structure Aim Ensure the correctness Generate particles of main domain Initiate particle paras Fix neighbour search method Generate dummy and repulsive particles Make the approximation right Make the kernel functions right Fix the boundary treatment Test for \\(f=x+y\\) etc Improve the performance Allocate memory well - more particles and faster speed Promote the calculation function - faster Use correct taichi functions and syntax - more particles and faster Balance the convenience Set colorbar of selectable paras while running. Extract the repeated code and functions Promote the convenience of inputing paras","title":"Code frame"},{"location":"codeframe/#code-frame","text":"","title":"Code frame"},{"location":"codeframe/#structure","text":"","title":"Structure"},{"location":"codeframe/#aim","text":"","title":"Aim"},{"location":"codeframe/#ensure-the-correctness","text":"Generate particles of main domain Initiate particle paras Fix neighbour search method Generate dummy and repulsive particles Make the approximation right Make the kernel functions right Fix the boundary treatment Test for \\(f=x+y\\) etc","title":"Ensure the correctness"},{"location":"codeframe/#improve-the-performance","text":"Allocate memory well - more particles and faster speed Promote the calculation function - faster Use correct taichi functions and syntax - more particles and faster","title":"Improve the performance"},{"location":"codeframe/#balance-the-convenience","text":"Set colorbar of selectable paras while running. Extract the repeated code and functions Promote the convenience of inputing paras","title":"Balance the convenience"},{"location":"fluid/","text":"SPH for fluid Navier-Stokes equation Forces for incompressible fluids @taichiCourse01-10 PPT p8-13 \\[f = ma = {\\color{Green} f_{ext}} + {\\color{RoyalBlue} f_{pres}} + {\\color{Orange} f_{visc}}\\] N-S Equations @taichiCourse01-10 PPT p16-28 The momentum equation \\[\\rho\\frac{{\\rm D}v}{{\\rm D}t}={\\color{Green} \\rho g} {\\color{RoyalBlue} -\\nabla p} + {\\color{Orange} \\mu\\nabla^2v}\\] The mass conserving condition \\[{\\color{RoyalBlue} \\nabla\\cdot v=0} \\] \\(\\rho\\frac{{\\rm D}v}{{\\rm D}t}\\) : This is simply \"mass\" times \"acceleration\" divided by \"volume\". \\({\\color{Green} \\rho g}\\) : External force term, gravitational force divided by \"volume\". \\({\\color{Orange} \\mu\\nabla^2v}\\) : Viscosity term, how fluids want to move together. \u8868\u793a\u6269\u6563\u6709\u591a\u5feb\uff0c\u6db2\u4f53\u5c3d\u53ef\u80fd\u5730\u5f80\u76f8\u540c\u7684\u65b9\u5411\u8fd0\u52a8\u3002 \\(\\mu\\) : some fluids are more viscous than others. \\({\\color{RoyalBlue} -\\nabla p}\\) : Pressure term, fluids do not want to change volume. \\(p=k(\\rho-\\rho_0)\\) but \\(\\rho\\) is unknown. \\({\\color{RoyalBlue} \\nabla\\cdot v=0 \\Leftrightarrow \\frac{{\\rm D} \\rho}{{\\rm D} t} = \\rho(\\nabla\\cdot v) = 0}\\) : Divergence free condition. Outbound flow equals to inbound flow. The mass conserving condition. \u6563\u5ea6\u5f52\u96f6\u6761\u4ef6\u3001\u4e0d\u53ef\u538b\u7f29\u7279\u6027\uff0c\u4e5f\u662f\u8d28\u91cf\u5b88\u6052\u6761\u4ef6\u3002 Temporal discretization @taichiCourse01-10 PPT p32 Integrate the incompressible N-S equation in steps (also reffered as \"Operator splitting\" or \"Advection-Projection\" in different contexts): Step 1: input \\(v^t\\) , output \\(v^{t+0.5\\Delta t}\\) : \\(\\rho\\frac{{\\rm D} v}{{\\rm D} t}={\\color{Green} \\rho g} + {\\color{Orange} \\mu\\nabla^2v}\\) Step 2: input \\(v^{t+0.5\\Delta t}\\) , output \\(v^{t+\\Delta t}\\) : \\(\\rho\\frac{{\\rm D} v}{{\\rm D} t}={\\color{RoyalBlue} -\\nabla p}\\ and\\ {\\color{RoyalBlue} \\nabla\\cdot v=0}\\) (\u6784\u6210\u4e86 \\(\\rho\\) \u548c \\(v\\) \u7684\u4e8c\u5143\u975e\u7ebf\u6027\u65b9\u7a0b\u7ec4) Full time integration @taichiCourse01-10 PPT p33 \\[\\frac{{\\rm D}v}{{\\rm D}t}={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla p} + {\\color{Orange} \\nu\\nabla^2v},\\ \\nu=\\frac{\\mu}{\\rho_0}\\] Given \\(x^t\\) , \\(u^t\\) : Step 1: Advection / external and viscosity force integration Solve: \\({\\color{Purple} {\\rm d}v} = {\\color{Green} g} + {\\color{Orange} \\nu\\nabla^2v_n}\\) Update: \\(v^{t+0.5\\Delta t} = v^t+0.5 \\Delta t{\\color{Purple} {\\rm d}v}\\) Step 2: Projection / pressure solver Solve: \\({\\color{red} {\\rm d}v} = {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla(k(\\rho-\\rho_0))}\\) and \\({\\color{RoyalBlue} \\frac{{\\rm D} \\rho}{{\\rm D} t} = \\nabla\\cdot(v_{n+0.5}+{\\color{red} {\\rm d}v})=0}\\) Update: \\(v^{t+\\Delta t} = v^{t+0.5\\Delta t} + 0.5 \\Delta t {\\color{red} {\\rm d}v}\\) Step 3: Update position Update: \\(x^{t+\\Delta t} = x^t+\\Delta tv^{t+\\Delta t}\\) Return \\(x^{t+\\Delta t}\\) , \\(v^{t+\\Delta t}\\) QUESTIONS In step 1 and 2, maybe the \\(\\Delta t\\) should also multiple 0.5? ANSWER : I think yes! The weakly compressible assumption @taichiCourse01-10 PPT p34-35 Storing the density \\(\\rho\\) as an individual variable that advect with the velocity field. Then the \\(p\\) can be assumed as a variable related by time and the mass conserving equation is killed. Change in Step 2: Solve: \\({\\color{red} {\\rm d}v} = {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla(k(\\rho-\\rho_0))}\\) Update: \\(v^{t+\\Delta t} = v^{t+0.5\\Delta t} + \\Delta t {\\color{red} {\\rm d}v}\\) And step 2 and 1 can be merged. This is nothing but Symplectic Euler integration. Fluid dynamics with particles @taichiCourse01-10 PPT p43 and 75-78 Continuous view: \\[\\frac{{\\rm D}v}{{\\rm D}t}={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla p} + {\\color{Orange} \\nu\\nabla^2v}\\] Discrete view (using particle): \\[\\frac{{\\rm d}v_i}{{\\rm d}t}=a_i={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla p(x_i)} + {\\color{Orange} \\nu\\nabla^2v(x_i)}\\] Then the problem comes to: how to evaluate a funcion of \\({\\color{RoyalBlue} \\rho(x_i)}\\) , \\({\\color{RoyalBlue} \\nabla p(x_i)}\\) , \\({\\color{Orange} \\nabla^2v(x_i)}\\) In WCSPH: Find a particle of interest ( \\(i\\) ) and its nerghbours ( \\(j\\) ) with its support radius \\(h\\) . Compute the acceleration for particle \\(i\\) : for i in particles: Step 1: Evaluate density \\[\\rho_i = \\sum_j \\frac{m_j}{\\rho_j}\\rho_jW(r_i-r_j, h) = \\sum_j m_jW_{ij}\\] Step 2: Evaluate viscosity ( anti-sym ) \\[\\nu\\nabla^2v_i = \\nu\\sum_j m_j \\frac{v_j-v_i}{\\rho_j}\\nabla^2W_{ij}\\] in taichiWCSPH code it's an approximation from @monaghan2005 : \\[\\nu\\nabla^2v_i = 2\\nu(dim+2)\\sum_j \\frac{m_j}{\\rho_j}(\\frac{v_{ij}\\cdot r_{ij}}{\\|r_{ij}\\|^2+0.01h^2})\\nabla W_{ij}\\] Evaluate pressure gradient ( sym ), where \\(p = k(\\rho-\\rho_0)\\) \\[-\\frac{1}{\\rho_i}\\nabla p_i = -\\frac{\\rho_i}{\\rho_i}\\sum_j m_j(\\frac{p_j}{\\rho_j^2}+\\frac{p_i}{\\rho_i^2})\\nabla W_{ij} = -\\sum_j m_j(\\frac{p_j}{\\rho_j^2}+\\frac{p_i}{\\rho_i^2})\\nabla W_{ij}\\] in taichiWCSPH code, \\(p = k_1((\\rho/\\rho_0)^{k_2}-1)\\) , where \\(k_1\\) is a para about stiffness and \\(k_2\\) is just an exponent. Calculate the acceleration Then do time integration using Symplectic Euler method: \\[v_i^* = v_i+\\Delta t\\frac{{\\rm d}v_i}{{\\rm d}t},\\ \\ x_i^* = x_i+\\Delta tv_i^*\\] RK4 for WCSPH @By myself The momentum equation of WCSPH is as: \\[\\frac{{\\rm D}v_i}{{\\rm D}t}={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho_i}\\nabla p_i} + {\\color{Orange} \\nu\\nabla^2v_i} = F(v_i)\\] and: \\[v_i^{t+\\Delta t} = v_i^t+\\frac{\\Delta t}{6}(F(v_i^1)+2F(v_i^2)+2F(v_i^3)+F(v_i^4))\\] where: \\[\\begin{aligned} \\begin{array}{ll} v^1_i = v^t_i\\\\ v^2_i = v^t_i+\\frac{\\Delta t}{2}(F(v^1_i))\\\\ v^3_i = v^t_i+\\frac{\\Delta t}{2}(F(v^2_i))\\\\ v^4_i = v^t_i+\\Delta t(F(v^3_i)) \\end{array} \\end{aligned}\\]","title":"SPH for fluid"},{"location":"fluid/#sph-for-fluid","text":"","title":"SPH for fluid"},{"location":"fluid/#navier-stokes-equation","text":"","title":"Navier-Stokes equation"},{"location":"fluid/#forces-for-incompressible-fluids","text":"@taichiCourse01-10 PPT p8-13 \\[f = ma = {\\color{Green} f_{ext}} + {\\color{RoyalBlue} f_{pres}} + {\\color{Orange} f_{visc}}\\]","title":"Forces for incompressible fluids"},{"location":"fluid/#n-s-equations","text":"@taichiCourse01-10 PPT p16-28 The momentum equation \\[\\rho\\frac{{\\rm D}v}{{\\rm D}t}={\\color{Green} \\rho g} {\\color{RoyalBlue} -\\nabla p} + {\\color{Orange} \\mu\\nabla^2v}\\] The mass conserving condition \\[{\\color{RoyalBlue} \\nabla\\cdot v=0} \\] \\(\\rho\\frac{{\\rm D}v}{{\\rm D}t}\\) : This is simply \"mass\" times \"acceleration\" divided by \"volume\". \\({\\color{Green} \\rho g}\\) : External force term, gravitational force divided by \"volume\". \\({\\color{Orange} \\mu\\nabla^2v}\\) : Viscosity term, how fluids want to move together. \u8868\u793a\u6269\u6563\u6709\u591a\u5feb\uff0c\u6db2\u4f53\u5c3d\u53ef\u80fd\u5730\u5f80\u76f8\u540c\u7684\u65b9\u5411\u8fd0\u52a8\u3002 \\(\\mu\\) : some fluids are more viscous than others. \\({\\color{RoyalBlue} -\\nabla p}\\) : Pressure term, fluids do not want to change volume. \\(p=k(\\rho-\\rho_0)\\) but \\(\\rho\\) is unknown. \\({\\color{RoyalBlue} \\nabla\\cdot v=0 \\Leftrightarrow \\frac{{\\rm D} \\rho}{{\\rm D} t} = \\rho(\\nabla\\cdot v) = 0}\\) : Divergence free condition. Outbound flow equals to inbound flow. The mass conserving condition. \u6563\u5ea6\u5f52\u96f6\u6761\u4ef6\u3001\u4e0d\u53ef\u538b\u7f29\u7279\u6027\uff0c\u4e5f\u662f\u8d28\u91cf\u5b88\u6052\u6761\u4ef6\u3002","title":"N-S Equations"},{"location":"fluid/#temporal-discretization","text":"@taichiCourse01-10 PPT p32 Integrate the incompressible N-S equation in steps (also reffered as \"Operator splitting\" or \"Advection-Projection\" in different contexts): Step 1: input \\(v^t\\) , output \\(v^{t+0.5\\Delta t}\\) : \\(\\rho\\frac{{\\rm D} v}{{\\rm D} t}={\\color{Green} \\rho g} + {\\color{Orange} \\mu\\nabla^2v}\\) Step 2: input \\(v^{t+0.5\\Delta t}\\) , output \\(v^{t+\\Delta t}\\) : \\(\\rho\\frac{{\\rm D} v}{{\\rm D} t}={\\color{RoyalBlue} -\\nabla p}\\ and\\ {\\color{RoyalBlue} \\nabla\\cdot v=0}\\) (\u6784\u6210\u4e86 \\(\\rho\\) \u548c \\(v\\) \u7684\u4e8c\u5143\u975e\u7ebf\u6027\u65b9\u7a0b\u7ec4)","title":"Temporal discretization"},{"location":"fluid/#full-time-integration","text":"@taichiCourse01-10 PPT p33 \\[\\frac{{\\rm D}v}{{\\rm D}t}={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla p} + {\\color{Orange} \\nu\\nabla^2v},\\ \\nu=\\frac{\\mu}{\\rho_0}\\] Given \\(x^t\\) , \\(u^t\\) : Step 1: Advection / external and viscosity force integration Solve: \\({\\color{Purple} {\\rm d}v} = {\\color{Green} g} + {\\color{Orange} \\nu\\nabla^2v_n}\\) Update: \\(v^{t+0.5\\Delta t} = v^t+0.5 \\Delta t{\\color{Purple} {\\rm d}v}\\) Step 2: Projection / pressure solver Solve: \\({\\color{red} {\\rm d}v} = {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla(k(\\rho-\\rho_0))}\\) and \\({\\color{RoyalBlue} \\frac{{\\rm D} \\rho}{{\\rm D} t} = \\nabla\\cdot(v_{n+0.5}+{\\color{red} {\\rm d}v})=0}\\) Update: \\(v^{t+\\Delta t} = v^{t+0.5\\Delta t} + 0.5 \\Delta t {\\color{red} {\\rm d}v}\\) Step 3: Update position Update: \\(x^{t+\\Delta t} = x^t+\\Delta tv^{t+\\Delta t}\\) Return \\(x^{t+\\Delta t}\\) , \\(v^{t+\\Delta t}\\) QUESTIONS In step 1 and 2, maybe the \\(\\Delta t\\) should also multiple 0.5? ANSWER : I think yes!","title":"Full time integration"},{"location":"fluid/#the-weakly-compressible-assumption","text":"@taichiCourse01-10 PPT p34-35 Storing the density \\(\\rho\\) as an individual variable that advect with the velocity field. Then the \\(p\\) can be assumed as a variable related by time and the mass conserving equation is killed. Change in Step 2: Solve: \\({\\color{red} {\\rm d}v} = {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla(k(\\rho-\\rho_0))}\\) Update: \\(v^{t+\\Delta t} = v^{t+0.5\\Delta t} + \\Delta t {\\color{red} {\\rm d}v}\\) And step 2 and 1 can be merged. This is nothing but Symplectic Euler integration.","title":"The weakly compressible assumption"},{"location":"fluid/#fluid-dynamics-with-particles","text":"@taichiCourse01-10 PPT p43 and 75-78 Continuous view: \\[\\frac{{\\rm D}v}{{\\rm D}t}={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla p} + {\\color{Orange} \\nu\\nabla^2v}\\] Discrete view (using particle): \\[\\frac{{\\rm d}v_i}{{\\rm d}t}=a_i={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho}\\nabla p(x_i)} + {\\color{Orange} \\nu\\nabla^2v(x_i)}\\] Then the problem comes to: how to evaluate a funcion of \\({\\color{RoyalBlue} \\rho(x_i)}\\) , \\({\\color{RoyalBlue} \\nabla p(x_i)}\\) , \\({\\color{Orange} \\nabla^2v(x_i)}\\) In WCSPH: Find a particle of interest ( \\(i\\) ) and its nerghbours ( \\(j\\) ) with its support radius \\(h\\) . Compute the acceleration for particle \\(i\\) : for i in particles: Step 1: Evaluate density \\[\\rho_i = \\sum_j \\frac{m_j}{\\rho_j}\\rho_jW(r_i-r_j, h) = \\sum_j m_jW_{ij}\\] Step 2: Evaluate viscosity ( anti-sym ) \\[\\nu\\nabla^2v_i = \\nu\\sum_j m_j \\frac{v_j-v_i}{\\rho_j}\\nabla^2W_{ij}\\] in taichiWCSPH code it's an approximation from @monaghan2005 : \\[\\nu\\nabla^2v_i = 2\\nu(dim+2)\\sum_j \\frac{m_j}{\\rho_j}(\\frac{v_{ij}\\cdot r_{ij}}{\\|r_{ij}\\|^2+0.01h^2})\\nabla W_{ij}\\] Evaluate pressure gradient ( sym ), where \\(p = k(\\rho-\\rho_0)\\) \\[-\\frac{1}{\\rho_i}\\nabla p_i = -\\frac{\\rho_i}{\\rho_i}\\sum_j m_j(\\frac{p_j}{\\rho_j^2}+\\frac{p_i}{\\rho_i^2})\\nabla W_{ij} = -\\sum_j m_j(\\frac{p_j}{\\rho_j^2}+\\frac{p_i}{\\rho_i^2})\\nabla W_{ij}\\] in taichiWCSPH code, \\(p = k_1((\\rho/\\rho_0)^{k_2}-1)\\) , where \\(k_1\\) is a para about stiffness and \\(k_2\\) is just an exponent. Calculate the acceleration Then do time integration using Symplectic Euler method: \\[v_i^* = v_i+\\Delta t\\frac{{\\rm d}v_i}{{\\rm d}t},\\ \\ x_i^* = x_i+\\Delta tv_i^*\\]","title":"Fluid dynamics with particles"},{"location":"fluid/#rk4-for-wcsph","text":"@By myself The momentum equation of WCSPH is as: \\[\\frac{{\\rm D}v_i}{{\\rm D}t}={\\color{Green} g} {\\color{RoyalBlue} -\\frac{1}{\\rho_i}\\nabla p_i} + {\\color{Orange} \\nu\\nabla^2v_i} = F(v_i)\\] and: \\[v_i^{t+\\Delta t} = v_i^t+\\frac{\\Delta t}{6}(F(v_i^1)+2F(v_i^2)+2F(v_i^3)+F(v_i^4))\\] where: \\[\\begin{aligned} \\begin{array}{ll} v^1_i = v^t_i\\\\ v^2_i = v^t_i+\\frac{\\Delta t}{2}(F(v^1_i))\\\\ v^3_i = v^t_i+\\frac{\\Delta t}{2}(F(v^2_i))\\\\ v^4_i = v^t_i+\\Delta t(F(v^3_i)) \\end{array} \\end{aligned}\\]","title":"RK4 for WCSPH"},{"location":"foundation/","text":"Foundation of SPH Basic formulations The integral estimation @Chalk2019 4.2 The integral approximation involves representing a function \\(f(\\boldsymbol{x})\\) as an integral: \\[f(\\boldsymbol{x})=\\int_{\\Omega}f(\\boldsymbol{x}')\\delta(\\boldsymbol{x}-\\boldsymbol{x}'){\\rm d}\\boldsymbol{x}'\\] where \\(\\Omega\\) donates the integral domain and \\(\\delta(\\boldsymbol{x}-\\boldsymbol{x}')\\) is the Dirac delta function defined as: \\[\\delta(\\boldsymbol{x}-\\boldsymbol{x}')=\\begin{cases} 1, &\\boldsymbol{x}=\\boldsymbol{x}' \\\\ 0, &\\boldsymbol{x}\\neq\\boldsymbol{x}' \\end{cases} \\] In the derivation of SPH, the integral approximation is obtained by replacing the Dirac delta with a smoothing function \\(W\\) : \\[\\langle f(\\boldsymbol{x})\\rangle=\\int_{\\Omega}f(\\boldsymbol{x}')W(\\boldsymbol{x}-\\boldsymbol{x}', h){\\rm d}\\boldsymbol{x}' \\] The smoothing function, or kernel, must satisfy three conditions: \\[\\begin{aligned} \\begin{array}{rl} Normalisation\\ condition: &\\int_{\\Omega}W(\\boldsymbol{x}-\\boldsymbol{x}',h){\\rm d}\\boldsymbol{x}'=1 \\\\ Compact\\ support: &W(\\boldsymbol{x}-\\boldsymbol{x}',h)=0\\ when\\ |\\boldsymbol{x}-\\boldsymbol{x}'|>\\kappa h \\\\ Satisfy\\ the\\ \\delta\\ function\\ condition: &\\underset{h\\rightarrow0}{\\lim}W(\\boldsymbol{x}-\\boldsymbol{x}',h)=\\delta(\\boldsymbol{x}-\\boldsymbol{x}') \\end{array} \\end{aligned} \\] With these conditions for the smoothing kernel, the integral approximation is of second order accuracy, so that: \\[f(\\boldsymbol{x})=\\int_{\\Omega}f(\\boldsymbol{x}')W(\\boldsymbol{x}-\\boldsymbol{x}',h){\\rm d}\\boldsymbol{x}'+O(h^2) \\] Particle approximations The particle approximation is utilised to discretise the integral equation over a set of particles. This involves writing the integral approximation in discrete form using a summation approach: \\[\\langle f(\\boldsymbol{x})\\rangle=\\sum_{j=1}^Nf(\\boldsymbol{x}_j)W(\\boldsymbol{x}-\\boldsymbol{x}_j,h)V_j \\] where \\(V_j\\) is the discrete volume at each point and \\(N\\) is the total number of particles within the region defined by \\(W\\) and \\(h\\) . Here, the function \\(f(\\boldsymbol{x})\\) is approximated by summing over all discrete particles \\(j\\) within the domain of influence at the position \\(\\boldsymbol{x}\\) . So the summation approach can be expressed for a specific particle \\(i\\) as: \\[f(\\boldsymbol{x}_i)\\approx\\sum_{j=1}^N V_jf(\\boldsymbol{x}_j)W(\\boldsymbol{x}_i-\\boldsymbol{x}_j,h) \\] This equation describes the SPH evaluation of a function or variable at a particle \\(i\\) . Now, replace \\(f\\equiv\\nabla f\\) , we have: \\[\\nabla f(\\boldsymbol{x}_i)\\approx\\sum_{j=1}^N V_j\\nabla f(\\boldsymbol{x}_j)W(\\boldsymbol{x}_i-\\boldsymbol{x}_j,h) \\] Applying the Gaussian theorem (in a symmetric and positive weighting function, \\({\\rm d}V=\\vec n\\cdot{\\rm d}S\\) , and also \\(\\partial W/\\partial \\boldsymbol{x}_i=-\\partial W/\\partial \\boldsymbol{x}_j\\) ): \\[\\nabla f(\\boldsymbol{x}_i)\\approx\\sum_{j=1}^N V_jf(\\boldsymbol{x}_j)\\nabla_i W(\\boldsymbol{x}_i-\\boldsymbol{x}_j,h) \\] Spatial derivatives @taichiCourse01-10 PPT p59 and 72 Approximate a function \\(f(\\boldsymbol{x})\\) using finite probes \\(f(\\boldsymbol{x}_j)\\) , and the degree of freedom \\((\\boldsymbol{x})\\) goes inside the kernel functions ( anti-sym and sym ). SPH discretization: \\[f(x) \\approx \\sum_j V_jf(x_j)W(x-x_j, h) \\] SPH spatial derivatives: \\[{\\color{Salmon} \\nabla} f(x) \\approx \\sum_j V_jf(x_j){\\color{Salmon} \\nabla}W(x-x_j, h) \\] \\[{\\color{Salmon} \\nabla\\cdot} \\boldsymbol{f}(x) \\approx \\sum_j V_j\\boldsymbol{f}(x_j){\\color{Salmon} \\cdot\\nabla}W(x-x_j, h) \\] \\[{\\color{Salmon} \\nabla\\times} \\boldsymbol{f}(x) \\approx -\\sum_j V_j\\boldsymbol{f}(x_j){\\color{Salmon} \\times\\nabla}W(x-x_j, h) \\] \\[{\\color{Salmon} \\nabla^2} f(x) \\approx \\sum_j V_jf(x_j){\\color{Salmon} \\nabla^2}W(x-x_j, h) \\] with \\(W(\\boldsymbol{x}_i-\\boldsymbol{x}_j, h) = W_{ij}\\) in discrete view, and: \\[\\nabla_i W_{ij}=\\frac{\\partial W_{ij}}{\\partial \\boldsymbol{x}_i} \\] \\[\\nabla^2_i W_{ij}=\\frac{\\partial^2 W_{ij}}{\\partial \\boldsymbol{x}_i^2} \\] QUESTIONS How to calculate \\(\\nabla W\\) and \\(\\nabla^2 W\\) ? ANSWER : just directly take the partial derivative! Improving approximations for spatial derivatives @taichiCourse01-10 PPT p60-70 Let \\(f(r) \\equiv 1\\) , we have: \\(1 \\approx \\sum_j \\frac{m_j}{\\rho_j}W(r-r_j, h)\\) \\(0 \\approx \\sum_j \\frac{m_j}{\\rho_j}\\nabla W(r-r_j, h)\\) Since \\(f(r)\\equiv f(r) * 1\\) , we have: \\(\\nabla f(r) = \\nabla f(r)*1+f(r)*\\nabla 1\\) Or equivalently: \\(\\nabla f(r) = \\nabla f(r)*1-f(r)*\\nabla 1\\) Then use \\({\\color{Salmon} \\nabla} f(r) \\approx \\sum_j \\frac{m_j}{\\rho_j}f(r_j){\\color{Salmon} \\nabla}W(r-r_j, h)\\) to derivate \\(\\nabla f(r)\\) and \\(\\nabla 1\\) , we have: \\(\\nabla f(r) \\approx \\sum_j \\frac{m_j}{\\rho_j}f(r_j)\\nabla W(r-r_j, h) - f(r)\\sum_j \\frac{m_j}{\\rho_j}\\nabla W(r-r_j, h)\\) \\(\\nabla f(r) \\approx \\sum_j \\frac{m_j}{\\rho_j}(f(r_j)-f(r))\\nabla W(r-r_j, h)\\) , we call it the anti-symmetric form A more general case: \\[\\nabla f(r) \\approx \\sum_j m_j(\\frac{f(r_j)\\rho_j^{n-1}}{\\rho^n}-\\frac{nf(r)}{\\rho})\\nabla W(r-r_j, h)\\] When \\(n=-1\\) : \\(\\nabla f(r) \\approx \\rho\\sum_j m_j(\\frac{f(r_j)}{\\rho_j^2}+\\frac{f(r)}{\\rho^2})\\nabla W(r-r_j, h)\\) , we call it the symmetric form \u901a\u5e38\u4f1a\u4f7f\u7528\u4e00\u4e9b\u53cd\u5bf9\u79f0( anti-sym )\u6216\u5bf9\u79f0\u578b( sym )\u6765\u8fdb\u884c\u4e00\u4e9bSPH\u7684\u7a7a\u95f4\u6c42\u5bfc(spatial derivative)\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528SPH\u7684\u539f\u578b\u3002\u4f46\u4e24\u8005\u7684\u9009\u62e9\u662f\u4e2a\u7ecf\u9a8c\u6027\u7684\u95ee\u9898\uff0c\u5176\u4e2d\uff0c\u5f53 \\(f(r)\\) \u662f\u4e00\u4e2a\u529b\u7684\u65f6\u5019\uff0c\u4ece\u52a8\u91cf\u5b88\u6052\u7684\u89d2\u5ea6\u53bb\u63a8\u5bfc\uff0c\u4f7f\u7528 sym \u66f4\u597d\uff1b\u5f53\u505a\u6563\u5ea6\u3001\u9700\u8981\u6295\u5f71\u7684\u65f6\u5019\uff0c\u4f7f\u7528 anti-sym \u66f4\u597d\u3002 \u6216\u8bb8\u53ef\u4ee5\u8bf4\uff0c\u5f53 \\(f\\) \u662f\u7c92\u5b50 \\(i\\) \u548c \\(j\\) \u7684\u76f8\u4e92\u4f5c\u7528\u65f6\uff0c\u7528\u5bf9\u79f0\u578b\uff1b\u5f53 \\(f\\) \u662f\u7c92\u5b50\u672c\u8eab\u7684\u5c5e\u6027\u65f6\uff0c\u7528\u53cd\u5bf9\u79f0\u578b\uff1f Like to approximate the velocity gradient \\(\\nabla\\boldsymbol{v}\\) , using anti-symmtric form to ensure that the gradients of a constant velocity field vanish: \\[v_{\\alpha,\\beta}=\\frac{\\partial v^{\\alpha}}{\\partial x^{\\beta}}=\\sum_jV_j(v^{\\alpha}_j-v^{\\alpha}_i)\\cdot\\nabla_iW_{ij}^{\\beta}\\] Kernel functions Pairing instability @bui lecture A commmon misconception of SPH: Wrong choice of kernel function lead to \"pairing instability\" and this was often cited as SPH instability issue! The source of pairing instability in SPH comes from the gradient term \\(\\nabla_iW_{ij}\\) : Each kernel function could only accomodate a certain number of particles, which means forcing more particles in a kernel approximation cause SPH errors. Each kernel function has a inflection point (i.e. zero kernel gradient), which means particles at this point would not gain enough repulsive force due to SPH errors. However, the appropriate choice of kernel function and its parameters would completely eliminate pairing instability issues. Remarks : Pairing instability issue only occurs in a situation where there are more neighbouring particles in the influence domain that a kernel function can accodomate. Kernel functions whose Fourier transformation is negative for some wave vectors will trigger pairing instability at sufficient large number of neighbouring particles. (So that's why Wendland C2 kernel function wins, because all of its Fourier transformations for wave vectors are positive.) If we actually use a suitable kernel function with a suitable supporting length, we don't have the problem of pairing instability, and this issue is not because SPH instability. The cubic spline kernel @bui2021 \\[W_{ij}=W(\\boldsymbol{r}, h)=k_d\\begin{cases} \\frac{2}{3}-q^2+\\frac{1}{2}q^3, &0\\leq q \\leq 1 \\\\ \\frac{1}{6}(2-q)^3, &1 < q \\leq 2 \\\\ 0, &otherwise \\end{cases} \\] where \\(q = \\Vert\\boldsymbol{r}\\Vert/h\\) , \\(k_d\\) is the kernel normalization factors for respective dimensions \\(d=1,2,3\\) and \\(k_1=\\frac{1}{h}\\) , \\(k_2=\\frac{15}{7\\pi h^2}\\) , \\(k_3=\\frac{3}{2\\pi h^3}\\) . The first-order derivation: \\[\\nabla W_{ij}=\\frac{\\partial W}{\\partial x_i}=\\frac{\\partial W}{\\partial q}\\cdot\\frac{\\partial q}{\\partial r}\\cdot\\frac{\\partial r}{\\partial x_i}=\\frac{\\partial W}{\\partial q}\\cdot\\frac{1}{h}\\cdot\\frac{x_i-x_j}{\\Vert\\boldsymbol{r}\\Vert},\\ \\boldsymbol{r}=x_i-x_j \\] \\[\\frac{\\partial W}{\\partial q}=k_d\\begin{cases} \\frac{3}{2}q^2-2q, &0\\leq q \\leq 1 \\\\ -\\frac{1}{2}(2-q)^2, &1 < q \\leq 2 \\\\ 0, &otherwise \\end{cases} \\] The second-order derivation: \\[\\nabla^2W_{ij}=\\frac{\\partial^2 W}{\\partial x_i^2}=\\frac{\\partial}{\\partial x_i}(\\frac{\\partial W}{\\partial x_i})=\\frac{\\partial^2 W}{\\partial q^2}\\cdot(\\frac{\\partial q}{\\partial r}\\cdot\\frac{\\partial r}{\\partial x_i})^2=\\frac{\\partial^2 W}{\\partial q^2}\\cdot\\frac{1}{h^2}\\cdot\\frac{(x_i-x_j)^2}{\\Vert\\boldsymbol{r}\\Vert^2} \\] \\[\\frac{\\partial^2 W}{\\partial q^2}=k_d\\begin{cases} 3q-2, &0\\leq q \\leq 1 \\\\ 2-q, &1 < q \\leq 2 \\\\ 0, &otherwise \\end{cases} \\] QUESTIONS The second-order derivation is wrong!!!!!!!!!!!!!!!!!! Why \\(0<q<2\\) ? The support domain should be \\(h\\) , or \\(2h\\) ? It only depends on the choice and should be \\(2\\) in kernel function but \\(h\\) in neighbor search? ANSWER : @peng lecture. \\(h\\) is called \"smoothing length\" and controls the shape of kernel function, \\(\\kappa h\\) is the compact support radius determining the region of support domain, also the neighbour search condition should be \\(|\\boldsymbol{x}_i-\\boldsymbol{x}_j|\\le\\kappa h\\) . \\(\\kappa\\) is usually taking as \\(2\\) . @koschier2019 \\[W_{ij}=W(\\boldsymbol{r}, h)=k_d\\begin{cases} 6(q^3-q^2)+1, &0\\leq q \\leq 0.5 \\\\ 2(1-q)^3, &0.5 < q \\leq 1 \\\\ 0, &otherwise \\end{cases}\\] where \\(q = \\Vert\\boldsymbol{r}\\Vert/h\\) , \\(k_d\\) is the kernel normalization factors for respective dimensions \\(d=1,2,3\\) and \\(k_1=\\frac{4}{3h}\\) , \\(k_2=\\frac{40}{7\\pi h^2}\\) , \\(k_3=\\frac{8}{\\pi h^3}\\) . The Wendland C2 kernel @bui2021 2.3 \\[W_{ij}=W(\\boldsymbol{r}, h)=k_d\\begin{cases} (1-0.5q)^4(1+2q), &0\\leq q \\leq 2 \\\\ 0, &otherwise \\end{cases}\\] where \\(q = \\Vert\\boldsymbol{r}\\Vert/h\\) , \\(k_d\\) is the kernel normalization factors for respective dimensions \\(d=2,3\\) and \\(k_2=\\frac{7}{4\\pi h^2}\\) , \\(k_3=\\frac{21}{2\\pi h^3}\\) . For 1d, the formulation is changed. The kernel is \\(C^2\\) continuous. The first-order derivation: \\[\\nabla_i W_{ij}^{\\alpha}=k_d(-5q)(1-0.5q)^3\\cdot\\frac{1}{h}\\cdot\\frac{x_i^{\\alpha}-x_j^{\\alpha}}{\\Vert\\boldsymbol{r}\\Vert}\\] The second-order derivation: ??? CSPM gradient normalisation @Bui2021, @Chalk2020, @Chen1999 A corrective term can be multiplied to the smoothing kernel to improve the accuracy of the SPH approximation. The Corrective Smoothed Particle Method (CSPM) increases the accuracy of the kernel via a normalisation procedure, which is based on a Taylor series expansion of the SPH equations. After doing the Taylor expansion of \\(f_j\\) : \\[f_j=f_i+\\frac{\\partial f_i}{\\partial \\boldsymbol{x}_i^{\\alpha}}(\\boldsymbol{x}_j-\\boldsymbol{x}_i)^{\\alpha}+O(h^2)\\] Neglecting all the derivative terms, we have the corrective kernel estimate: \\[f_i\\approx\\sum_jV_jf_jW_{ij}\\approx f_i{\\color{Salmon}\\sum_jV_jW_{ij}}+O(h)\\] where the term \\({\\color{Salmon} 1}\\) should be \\(1\\) . Then divide the \\({\\color{Salmon} 1}\\) term, leading to: \\[f_i\\approx\\frac{\\sum_jV_jf_jW_{ij}}{\\sum_jV_jW_{ij}}=\\sum_jV_jf_jW_{ij}^{CSPM}\\] \\[W_{ij}^{CSPM}=\\frac{W_{ij}}{\\sum_kV_kW_{ik}}\\] and for the first derivative: \\[\\nabla^{\\beta}f_i\\approx\\sum_jV_jf_j\\nabla^{\\beta}_iW_{ij}\\approx f_i{\\color{Salmon} \\sum_jV_j\\nabla^{\\beta}_iW_{ij}}+\\frac{\\partial f_i}{\\partial \\boldsymbol{x}_i^{\\alpha}}{\\color{Green} \\sum_jV_j(\\boldsymbol{x}_j-\\boldsymbol{x}_i)^{\\alpha}\\nabla^{\\beta}_iW_{ij}}+O(h^2)\\] where the term \\({\\color{Salmon} 1}\\) should be \\(0\\) and the term \\({\\color{Green} 2}\\) should be \\(1\\) or \\(\\delta^{\\alpha\\beta}\\) . To completely eliminate these errors, one could subtract the \\({\\color{Salmon} 1}\\) term and then divide the \\({\\color{Green} 2}\\) term, leading to the normalised SPH formulation for the kernel derivative: \\[\\nabla f_i\\approx\\sum_{j=1} V_j(f_j-f_i)\\boldsymbol{L_{ij}}\\nabla_i W_{ij}=\\sum_{j=1} V_j(f_j-f_i)\\nabla_iW_{ij}^{CSPM}\\] \\[\\boldsymbol{L_{ij}}=[\\sum_jV_j(\\boldsymbol{x}_j-\\boldsymbol{x}_i)^{\\alpha}\\nabla^{\\beta}_iW_{ij}]^{-1}\\] \\[\\nabla_iW_{ij}^{CSPM}=[\\sum_kV_k(\\boldsymbol{x}_k-\\boldsymbol{x}_i)^{\\alpha}\\nabla^{\\beta}_iW_{ik}]^{-1}\\nabla_i W_{ij} \\] \\(\\boldsymbol{L}_{ij}\\) is the normalised matrix. This formulation has second order accuracy. Additionally, it also removes the boundary effects. But although it is a good operator, it also may become a bad one. Such as in formulations that DO NOT conserve linear momentum like force and stress. So we need an operator to conserve both linear and angular momenta. Shepard correction @Liu2012, @Shepard1968, @Reinhardt2019 The Shepaard correction of the smoothing kernel \\(W\\) addresses errors introduced by the SPH discretization process due to irregularly distributed particels inside the material domain. Especially near open boundaries (e.g. fluid-air interfaces), the computation of the fluid quantity is error-prone due to the lack of neighboring particles. The corrected kernel function is: \\[W_{ij}^{sh}=\\frac{W_{ij}}{\\sum_kV_kW_{ik}}\\] And this is a zero-order reinitialization [@pysph]. QUESTIONS Isn't it the CSPM for \\(f_i\\) ? MLS correction @Nguyen2017, @Liu2012, @Dilts1999, @Belytschko1998 The moving least square (MLS) method is adopted to correct the kernel function. \\[W_{ij}^{MLS}=[\\beta_0+\\beta_x(x_i-x_j)+\\beta_y(y_i-y_j)]W_{ij}\\] where \\[[\\beta_0,\\beta_x,\\beta_y]^T=(\\sum_jV_j\\boldsymbol{A}W_{ij})^{-1}[1,0,0]^T\\] \\[\\boldsymbol{A}=\\left[\\begin{matrix} 1 &x_i-x_j &y_i-y_j \\\\ x_i-x_j &(x_i-x_j)^2 &(x_i-x_j)(y_i-y_j) \\\\ y_i-y_j &(x_i-x_j)(y_i-y_j) &(y_i-y_j)^2 \\end{matrix}\\right]\\] or \\[\\boldsymbol{A}=pp^T\\ and\\ p=[1,\\ x_i-x_j,\\ y_i-y_j]^T\\] And this is the first order correction that reproduces exactly the linear variation of quantity. QUESTIONS Only suitable for 2D problems? How to compare with CSPM? Neighbour search Grid method Hash grid method Boundary treatment Types of boundary conditions @Bui2021, @Bui lecture Like any other numerical methods, the treatment of boundary condditions in SPH is required to facilitate its applications to a wide range of engineering problems. Solid boundary conditions such as fully-fixed , free-slip (or free-roller ) or symmetric . Flexible confining stress boundary conditions such as prescribed pressure of confining stress in triaxial tests. Free-surface condition. Simplest treatments for water @taichiCourse01-10 PPT p43 and 79-85 Mainly two styles: free surface and solid boundary Problems: There are not enough samples within the supporting radius. For free surface: Problem: Density \\(\\downarrow\\) , pressure \\(\\downarrow\\) ; and generate outward pressure. Solution: Clamp the negative pressure (everywhere); assume \\(p = max(0,k(\\rho-\\rho_0))\\) \u4f1a\u5bfc\u81f4\u6db2\u9762\u53ef\u80fd\u4f1a\u5411\u5916\u81a8\u80c0\u4e00\u70b9 For solid boundary: Problem: Density \\(\\downarrow\\) , pressure \\(\\downarrow\\) ; and fluid leakage (due to outbound velocity) Solution: \\(p = max(0,k(\\rho-\\rho_0))\\) ; Solution for leakage: Reflect the outbound velocity when close to boundary. \u8fd8\u53ef\u4ee5\u5c06\u5782\u76f4\u8fb9\u754c\u65b9\u5411\u7684\u901f\u5ea6\u4e58\u4e0a\u4e00\u4e2a\u8870\u51cf\u503c\u3002\u8fd9\u6837\u5904\u7406\u5927\u62b5\u5e94\u8be5\u662f\u4e0d\u4f1a\u5bfc\u81f4\u7c92\u5b50\u98de\u51fa\u53bb\u3002 Pad a layer of solid particles (or called ghost particles, dummy particles) underneath the boundaries with \\(\\rho_{solid} = \\rho_0\\) and \\(v_{solid} = 0\\) . \u603b\u4f53\u6765\u8bf4\u6bd4\u65b9\u6cd51\u7a33\u5b9a\uff0c\u4f46\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fb9\u754c\u9644\u8fd1\u7c92\u5b50\u7684\u6570\u503c\u9ecf\u6ede\u3002 QUESTIONS \u591a\u4ecb\u8d28\u7684\u6d41\u4f53\u6df7\u5408\u65f6\uff0c\u591a\u4ecb\u8d28\u7684\u754c\u9762\uff1f\uff1f\uff1f Free surface problems The particles that comprise the free surface should satisfy a stress-free condition. When considering large deformations this first requires the detection of free surface particles, followed by a transformation of the stress tensor so that the normal and tangential components are 0. QUESTIONS BUT how does the free surface condition implement? Dummy particles (or fixed-boundary particles) @Chalk2020, @Bui2021, @Zhao2019 \u865a\u62df\u7684\u8fb9\u754c\u7c92\u5b50\uff0c\u672c\u8eab\u4e0d\u5177\u6709\u5177\u4f53\u7684\u5c5e\u6027\u6570\u503c\u3002\u5728\u6bcf\u4e00\u4e2aStep\u4e2d\uff0c\u5728\u6bcf\u4e00\u4e2a\u7c92\u5b50\u7684\u8ba1\u7b97\u4e2d\uff0c\u5148\u52a0\u5165\u4e00\u4e2a\u5bf9Dummy particle\u5bf9\u5e94\u5c5e\u6027\u7684\u8d4b\u503c\u3002 The dummy particle (or ghost particle) method is used to represent the wall boundary. For dummy particles outside the wall boundary, they are spaced apart by \\(\\Delta x\\) . For repulsive particles at the wall boundary, are \\(\\Delta x/2\\) . For an interior particle A (circle) that contains a dummy particle B (square) within its neighbourhood, the normal distances \\(d_A\\) and \\(d_B\\) to the wall are calculated. An artificial velocity \\(\\boldsymbol{v}_B\\) is then assigned to the dummy particle: \\[\\boldsymbol{v}_B = -\\frac{d_B}{d_A}\\boldsymbol{v}_A\\] To account for extremely large values of the dummy particle velocity when an interior particle approaches the boundary (and \\(d_A\\) approaches 0), a parameter \\(\\beta\\) is introduced: \\[\\boldsymbol{v}_B = (1-\\beta)\\boldsymbol{v}_A+\\beta\\boldsymbol{v}_{wall}\\ ,\\ \\beta = min(\\beta_{max}, 1+\\frac{d_B}{d_A})\\] \\(\\beta_{max}\\) have been found to be between \\(1.5\\rightarrow2\\) , and here we use \\(\\beta_{max}=1.5\\) . And we have \\(\\boldsymbol{\\sigma}_B=\\boldsymbol{\\sigma}_A\\) and \\(p_B=p_A\\) , etc. The simple definition ensures that there is a uniform stress distribution for the particles that are near the wall boundaries, and it contributes to smooth stress distributions (through the \\(\\boldsymbol{f}^{\\sigma}\\) term) on the interior particles in the equation of momentum through the particle-dummy interaction. From Bui's lecture , the stress and velocity of fixed boundary particles ( \\(a\\) ) can also be interpolated from real particles ( \\(b\\) ). For the fully-fixed boundary: \\[\\boldsymbol{v}_i^a=-\\sum_jV_i^b\\boldsymbol{v}_i^b\\widetilde{W}_{ij},\\ \\boldsymbol{\\sigma}_i^a=\\sum_jV_i^b\\boldsymbol{\\sigma}_i^b\\widetilde{W}_{ij}\\] While for the free-slip boundary: \\[\\boldsymbol{v}_i^{a,n}=\\sum_jV_j^b(\\boldsymbol{v}_i^{a,n}-2\\boldsymbol{v}_j^{b,n})\\widetilde{W}_{ij}\\ or\\ \\boldsymbol{v}_i^{a,n}=-\\sum_jV_j^b\\boldsymbol{v}_j^{b,n}\\widetilde{W}_{ij},\\ \\boldsymbol{v}_i^{a,t}=\\sum_jV_j^b\\boldsymbol{v}_j^{b,t}\\widetilde{W}_{ij}\\] \\[\\sigma_i^{a, \\alpha\\beta}=\\begin{cases} \\sum_jV_j^b\\sigma_j^{b, \\alpha\\beta}\\widetilde{W}_{ij}, &\\alpha=\\beta \\\\ -\\sum_jV_j^b\\sigma_j^{b, \\alpha\\beta}\\widetilde{W}_{ij}, & \\alpha \\neq \\beta \\end{cases}\\] where \\(\\boldsymbol{v}^{a,n}\\) and \\(\\boldsymbol{v}^{a,t}\\) are the normal and shear velocity components of particle \\(a\\) with respect to the solid boundary surface. To calculate the normal vector for each particle on the open boundary, refer to @Zhao2019 Sec 4.1 . A \"soft\" repulsive force @Chalk2020, Liu2012 This is a coupled dynamic solid boundary treatment. The repulsive particles (triangle) are set to apply the no-slip effect and always guarantee that the particles do not penetrate the wall boundary. They can apply a soft repulsive force to the particles near the wall boundary, which is incorporated as a body force in the momentum equation. The definition of the repulsive force is introduced that prevents particle penetration without obviously disturbing the interior particels. The force \\(\\hat{\\boldsymbol{F}}_{ij}\\) is applied to all particles that interact with the repulsive boundary particles, and is included in the SPH momentum equation: \\[\\hat{\\boldsymbol{F}}_{ij} = \\sum_j 0.01c^2\\chi\\cdot\\hat{f}(\\gamma)\\frac{\\boldsymbol{x}_{ij}}{r^2}\\] where: \\[\\chi = \\left\\{ \\begin{array}{ll} 1-\\frac{r}{1.5\\Delta x}, &0\\leq r<1.5\\Delta x \\\\0, &r\\geq 1.5\\Delta x \\end{array} \\right.\\] \\[\\gamma = \\frac{r}{0.75h_{ij}}\\] \\[\\hat{f}(\\gamma) = \\left\\{ \\begin{array}{ll} \\frac{2}{3}, &0<\\gamma\\leq\\frac{2}{3}\\\\ 2\\gamma-1.5\\gamma^2, &\\frac{2}{3}<\\gamma\\leq 1\\\\ 0.5(2-\\gamma)^2, &1<\\gamma<2\\\\ 0, &\\gamma\\geq 2 \\end{array} \\right.\\] And this soft repulsive force was combined with dummy particles and applied to simulations of water flow and the propagation of a Bingham material. Time integration and advection Courant-Friedrichs-Lewy (CFL) @Bui2021 3.6, Yang2021 2.5 and Koschier2019 2.9 The CFL condition is a necessary condition for the convergence of numerical solvers for differential equations and, as a result, provides an upper bound for the time step width. The size of \\(\\Delta t\\) is determined using the Courant-Friedrichs-Lewy (CFL) stability condition, which, for SPH states that: \\[\\Delta t=C_{CFL}\\frac{h}{\\Vert \\boldsymbol{v}^{max}\\Vert}\\] where a suitable constant value for \\(C_{CFL}\\) was found to be 0.2 from Yang2021, 0.1 from Bui2021, 0.4 from Koschier2019. \\(h\\) is the smoothing length and \\(\\boldsymbol{v}^{max}\\) is the velocity at which the fastest particle travels, which can be the speed of sound \\(c\\) of the material with \\(c=\\sqrt{E/\\rho}\\) . Symp Euler - Symplectic Euler (SE) @taichiCourse01-10 PPT p77 Also referred to as semi-implicit Euler or Euler-Cromer scheme. \\[v_i^* = v_i+\\Delta t\\frac{{\\rm d}v_i}{{\\rm d}t},\\ \\ x_i^* = x_i+\\Delta tv_i^*\\] Leap-Frog (LF) @yang2021 Leap-Frog(LF) time-integration scheme is sufficiently stable, accurate, and fast due to only requiring one calculation of forces for each timestep. For a given time-step, the density and velocity are brought forward to the mid-increment using material derivatives from the previous timestep(if available), and the position is updated at full-increments: \\[f_{n+\\frac{1}{2}}=f_n+\\frac{\\Delta t}{2}(\\frac{{\\rm D}f}{{\\rm D}t})_{n-1}\\] \\(f\\) is density or velocity or stress. Then calculate \\((\\frac{{\\rm D}f}{{\\rm D}t})_{n}\\) \\[f_{n+1}=f_n+\\Delta t(\\frac{{\\rm D}f}{{\\rm D}t})_{n}\\] \\[\\boldsymbol{x}_{n+1}=\\boldsymbol{x}_n+\\Delta t\\times\\boldsymbol{u}_{n+1}\\] RK4 - 4th order Runge-Kutta (RK4) @Chalk2020 Appendix B. The RK4 scheme has fourth order accuracy and relatively simple implementation. Consider a general ordinary differential equation for a variable \\(\\phi\\) with an initial condition \\(\\phi^0\\) at an initial time \\(t^0\\) : \\[\\dot{\\phi} = f(t, \\phi),\\ \\phi(t^0) = \\phi^0\\] where \\(f\\) is a function of \\(\\phi\\) and time \\(t\\) . The RK4 method is employed to increment \\(\\phi\\) by a time step \\(\\Delta t\\) to obtain the solution at time \\(t = t+\\Delta t\\) : \\[\\phi^{t+\\Delta t}=\\phi^t+\\frac{\\Delta t}{6}(k_1+2k_2+2k_3+k_4)\\] \\[k_1=f(\\phi_1),\\ k_2=f(\\phi_2),\\ k_3=f(\\phi_3),\\ k_4=f(\\phi_4)\\] \\[\\phi_1=\\phi^t,\\ \\phi_2=\\phi^t+\\frac{\\Delta t}{2}k_1,\\ \\phi_3=\\phi^t+\\frac{\\Delta t}{2}k_2,\\ \\phi_4=\\phi^t+\\Delta tk_3\\] XSPH In addition to the velocity and stress, the position vectors of each particle \\(\\boldsymbol{x}_i\\) are updated via the XSPH method at the end of each time step as: \\[\\frac{{\\rm d} \\boldsymbol{x}_i}{{\\rm d} t} = \\boldsymbol{v}_i + \\epsilon_x\\sum_j\\frac{m_j}{\\rho_j}(\\boldsymbol{v}_j - \\boldsymbol{v}_i)\\nabla W_{ij}\\] Alternatively, the discretised XSPH equation is: \\[\\boldsymbol{x}_i^{t+\\Delta t} = \\boldsymbol{x}_i^t + \\Delta t\\frac{{\\rm d} \\boldsymbol{x}_i}{{\\rm d} t} = \\boldsymbol{x}_i^t + \\Delta t(\\boldsymbol{v}_i^{t+\\Delta t} + \\epsilon_x\\sum_j\\frac{m_j}{\\rho_j}(\\boldsymbol{v}_j - \\boldsymbol{v}_i)\\nabla W_{ij})\\] where \\(\\epsilon_x\\) is a tuning para, \\(0\\leq\\epsilon_x\\leq1\\) . While, in standard SPH, the simplest way is: \\[\\frac{{\\rm d} \\boldsymbol{x}_i}{{\\rm d} t} = \\boldsymbol{v}_i\\] And for the particle position update (Leap-Frog): \\[\\boldsymbol{x}_i^{t+\\Delta t} = \\boldsymbol{x}_i^t + {\\Delta t}\\boldsymbol{v}_i^{t+\\frac{\\Delta t}{2}}\\ and\\ \\boldsymbol{v}_i^{t+\\frac{\\Delta t}{2}} = \\frac{1}{2}(\\boldsymbol{v}_i^{t+\\Delta t}+\\boldsymbol{v}_i^t)\\] or just Symplectic Euler: \\[\\boldsymbol{x}_i^{t+\\Delta t} = \\boldsymbol{x}_i^t + {\\Delta t}\\boldsymbol{v}_i^{t+\\Delta t}\\] Numerical oscillations and dissipations in SPH Artificial viscosity - standard approach @bui2021 3.3, @chalk2020 4.5.1, @nguyen2017, @Adami2012, from @Monaghan1983 The fully dynamic equation would cause SPH particles to freely oscillate due to even small unbalanced forces, most of which is attributed to the zero-energy mode produced by the anti-symmetric kernel function with zero kernel gradient at the inflection point. However, this oscillation of SPH particles or material points is a common issue associated with any numerical method used to solve the fully dynamic motion equation. An adapted artificial viscosity was implemented with SPH to dampen the irregular particle motion and pressure fluctuations, and to prevent the non-physical collisions of two approaching particles. The artificial viscosity term \\(\\Pi_{ij}\\) is included in the SPH momentum equation as: \\[\\frac{{\\rm D}\\boldsymbol{v}_i}{{\\rm D}t}=\\sum_jm_j(\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2}+\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2}+\\Pi_{ij}\\boldsymbol{I})\\cdot\\nabla_iW_{ij}+\\boldsymbol{f}^{ext}_i\\] And the most widely used form of artificial viscosity is: \\[\\Pi_{ij}=\\begin{cases} \\frac{-\\alpha_{\\Pi}c_{ij}\\phi_{ij}+\\beta_{\\Pi}\\phi_{ij}^2}{\\rho_{ij}},&\\boldsymbol{v}_{ij}\\cdot\\boldsymbol{x}_{ij}<0\\\\ 0,&\\boldsymbol{v}_{ij}\\cdot\\boldsymbol{x}_{ij}\\ge0\\\\ \\end{cases}\\] \\[\\phi_{ij}=\\frac{h_{ij}\\boldsymbol{v}_{ij}\\cdot\\boldsymbol{x}_{ij}}{\\Vert\\boldsymbol{x}_{ij}\\Vert^2+\\varepsilon h_{ij}^2}\\] \\[c_{ij}=\\frac{c_i+c_j}{2},\\ \\rho_{ij}=\\frac{\\rho_i+\\rho_j}{2},\\ h_{ij}=\\frac{h_i+h_j}{2},\\ \\boldsymbol{x}_{ij}=\\boldsymbol{x}_i-\\boldsymbol{x}_j,\\ \\boldsymbol{v}_{ij}=\\boldsymbol{v}_i-\\boldsymbol{v}_j\\] where \\(\\alpha_{\\Pi}\\) and \\(\\beta_{\\Pi}\\) are problem dependent tuning parameters, \\(c\\) is the speed of sound. \\(\\alpha_{\\Pi}\\) is associated with the speed of sound and is related to the linear term, while \\(\\beta_{\\Pi}\\) is associated with the square of the velocity and has little effect in problems where the flow velocity is not comparable to the speed of sound. \\(\\varepsilon=0.01\\) is a numerical parameter introduced to prevent numerical divergences, only to ensure a non-zero denominator. This artificial viscosity is applied only for interactions between material particles, i.e. no artificial dissipation is introduced for the interaction of dummy particles and real particles. A disadvantage of using the artificial viscosity is that parameter tuning may be required to obtain the optimal values which are not directly associated with any physical properties. The use of the artificial viscosity in SPH simulations is purely for the purposes of numerical stabilisation. Alternative viscous damping term @bui2021 3.3, @chalk2020 4.5.1, @nguyen2017 Alternative damping terms can be used instead of the artificial viscosity that have more physical relevance to the problem, or require less calibration. The following velocity-dependent damping term can be included as a body force in the equation of the momentum: \\[\\boldsymbol{F}_d=-\\mu_d\\boldsymbol{v}\\] \\(\\mu_d\\) is the damping factor which can be computed by \\(\\mu_d=\\xi\\sqrt{E/\\rho h^2}\\) with \\(\\xi\\) being a non-dimensional damping coefficient that requires calibrations for different applications. For the simulation of granular flows, such as the flow of granular column collapse experiments in Nguyen2017 , a constant value of \\(\\xi=5\\times10^{-5}\\) is recommended. Stress/strain regularisation @bui2021 3.3, @nguyen2017 While the kinematics of SPH simulation is generally realistic, the stress-pressure fields of SPH particles undergoing large deformation can exhibit large oscillations. This problem is known as the sort-length-scale-noise and is identified as one of the key challenges of the standard SPH method tha needs to be addressed in order to improve the accuracy of SPH simulations. The problem becomes worse when the artificial viscosity is not adopted in SPH simulations, although the viscous damping force could slow down the numerical instability process. Nguyen2017 suggests regularising the stresses and strains of each SPH particle over its kernel integral domain after a certain number of computational cycles and uses MLS method: \\[\\langle\\boldsymbol{\\sigma}_{i}\\rangle=\\sum_jV_j\\boldsymbol{\\sigma}_{j}W^{MLS}_{ij}\\] \\[\\langle\\boldsymbol{\\epsilon}_{i}\\rangle=\\sum_jV_j\\boldsymbol{\\epsilon}_{j}W^{MLS}_{ij}\\] And Nguyen2017 suggestes applying the above MLS correction every 5 steps. Tensile instability","title":"SPH foundations"},{"location":"foundation/#foundation-of-sph","text":"","title":"Foundation of SPH"},{"location":"foundation/#basic-formulations","text":"","title":"Basic formulations"},{"location":"foundation/#the-integral-estimation","text":"@Chalk2019 4.2 The integral approximation involves representing a function \\(f(\\boldsymbol{x})\\) as an integral: \\[f(\\boldsymbol{x})=\\int_{\\Omega}f(\\boldsymbol{x}')\\delta(\\boldsymbol{x}-\\boldsymbol{x}'){\\rm d}\\boldsymbol{x}'\\] where \\(\\Omega\\) donates the integral domain and \\(\\delta(\\boldsymbol{x}-\\boldsymbol{x}')\\) is the Dirac delta function defined as: \\[\\delta(\\boldsymbol{x}-\\boldsymbol{x}')=\\begin{cases} 1, &\\boldsymbol{x}=\\boldsymbol{x}' \\\\ 0, &\\boldsymbol{x}\\neq\\boldsymbol{x}' \\end{cases} \\] In the derivation of SPH, the integral approximation is obtained by replacing the Dirac delta with a smoothing function \\(W\\) : \\[\\langle f(\\boldsymbol{x})\\rangle=\\int_{\\Omega}f(\\boldsymbol{x}')W(\\boldsymbol{x}-\\boldsymbol{x}', h){\\rm d}\\boldsymbol{x}' \\] The smoothing function, or kernel, must satisfy three conditions: \\[\\begin{aligned} \\begin{array}{rl} Normalisation\\ condition: &\\int_{\\Omega}W(\\boldsymbol{x}-\\boldsymbol{x}',h){\\rm d}\\boldsymbol{x}'=1 \\\\ Compact\\ support: &W(\\boldsymbol{x}-\\boldsymbol{x}',h)=0\\ when\\ |\\boldsymbol{x}-\\boldsymbol{x}'|>\\kappa h \\\\ Satisfy\\ the\\ \\delta\\ function\\ condition: &\\underset{h\\rightarrow0}{\\lim}W(\\boldsymbol{x}-\\boldsymbol{x}',h)=\\delta(\\boldsymbol{x}-\\boldsymbol{x}') \\end{array} \\end{aligned} \\] With these conditions for the smoothing kernel, the integral approximation is of second order accuracy, so that: \\[f(\\boldsymbol{x})=\\int_{\\Omega}f(\\boldsymbol{x}')W(\\boldsymbol{x}-\\boldsymbol{x}',h){\\rm d}\\boldsymbol{x}'+O(h^2) \\]","title":"The integral estimation"},{"location":"foundation/#particle-approximations","text":"The particle approximation is utilised to discretise the integral equation over a set of particles. This involves writing the integral approximation in discrete form using a summation approach: \\[\\langle f(\\boldsymbol{x})\\rangle=\\sum_{j=1}^Nf(\\boldsymbol{x}_j)W(\\boldsymbol{x}-\\boldsymbol{x}_j,h)V_j \\] where \\(V_j\\) is the discrete volume at each point and \\(N\\) is the total number of particles within the region defined by \\(W\\) and \\(h\\) . Here, the function \\(f(\\boldsymbol{x})\\) is approximated by summing over all discrete particles \\(j\\) within the domain of influence at the position \\(\\boldsymbol{x}\\) . So the summation approach can be expressed for a specific particle \\(i\\) as: \\[f(\\boldsymbol{x}_i)\\approx\\sum_{j=1}^N V_jf(\\boldsymbol{x}_j)W(\\boldsymbol{x}_i-\\boldsymbol{x}_j,h) \\] This equation describes the SPH evaluation of a function or variable at a particle \\(i\\) . Now, replace \\(f\\equiv\\nabla f\\) , we have: \\[\\nabla f(\\boldsymbol{x}_i)\\approx\\sum_{j=1}^N V_j\\nabla f(\\boldsymbol{x}_j)W(\\boldsymbol{x}_i-\\boldsymbol{x}_j,h) \\] Applying the Gaussian theorem (in a symmetric and positive weighting function, \\({\\rm d}V=\\vec n\\cdot{\\rm d}S\\) , and also \\(\\partial W/\\partial \\boldsymbol{x}_i=-\\partial W/\\partial \\boldsymbol{x}_j\\) ): \\[\\nabla f(\\boldsymbol{x}_i)\\approx\\sum_{j=1}^N V_jf(\\boldsymbol{x}_j)\\nabla_i W(\\boldsymbol{x}_i-\\boldsymbol{x}_j,h) \\]","title":"Particle approximations"},{"location":"foundation/#spatial-derivatives","text":"@taichiCourse01-10 PPT p59 and 72 Approximate a function \\(f(\\boldsymbol{x})\\) using finite probes \\(f(\\boldsymbol{x}_j)\\) , and the degree of freedom \\((\\boldsymbol{x})\\) goes inside the kernel functions ( anti-sym and sym ). SPH discretization: \\[f(x) \\approx \\sum_j V_jf(x_j)W(x-x_j, h) \\] SPH spatial derivatives: \\[{\\color{Salmon} \\nabla} f(x) \\approx \\sum_j V_jf(x_j){\\color{Salmon} \\nabla}W(x-x_j, h) \\] \\[{\\color{Salmon} \\nabla\\cdot} \\boldsymbol{f}(x) \\approx \\sum_j V_j\\boldsymbol{f}(x_j){\\color{Salmon} \\cdot\\nabla}W(x-x_j, h) \\] \\[{\\color{Salmon} \\nabla\\times} \\boldsymbol{f}(x) \\approx -\\sum_j V_j\\boldsymbol{f}(x_j){\\color{Salmon} \\times\\nabla}W(x-x_j, h) \\] \\[{\\color{Salmon} \\nabla^2} f(x) \\approx \\sum_j V_jf(x_j){\\color{Salmon} \\nabla^2}W(x-x_j, h) \\] with \\(W(\\boldsymbol{x}_i-\\boldsymbol{x}_j, h) = W_{ij}\\) in discrete view, and: \\[\\nabla_i W_{ij}=\\frac{\\partial W_{ij}}{\\partial \\boldsymbol{x}_i} \\] \\[\\nabla^2_i W_{ij}=\\frac{\\partial^2 W_{ij}}{\\partial \\boldsymbol{x}_i^2} \\] QUESTIONS How to calculate \\(\\nabla W\\) and \\(\\nabla^2 W\\) ? ANSWER : just directly take the partial derivative!","title":"Spatial derivatives"},{"location":"foundation/#improving-approximations-for-spatial-derivatives","text":"@taichiCourse01-10 PPT p60-70 Let \\(f(r) \\equiv 1\\) , we have: \\(1 \\approx \\sum_j \\frac{m_j}{\\rho_j}W(r-r_j, h)\\) \\(0 \\approx \\sum_j \\frac{m_j}{\\rho_j}\\nabla W(r-r_j, h)\\) Since \\(f(r)\\equiv f(r) * 1\\) , we have: \\(\\nabla f(r) = \\nabla f(r)*1+f(r)*\\nabla 1\\) Or equivalently: \\(\\nabla f(r) = \\nabla f(r)*1-f(r)*\\nabla 1\\) Then use \\({\\color{Salmon} \\nabla} f(r) \\approx \\sum_j \\frac{m_j}{\\rho_j}f(r_j){\\color{Salmon} \\nabla}W(r-r_j, h)\\) to derivate \\(\\nabla f(r)\\) and \\(\\nabla 1\\) , we have: \\(\\nabla f(r) \\approx \\sum_j \\frac{m_j}{\\rho_j}f(r_j)\\nabla W(r-r_j, h) - f(r)\\sum_j \\frac{m_j}{\\rho_j}\\nabla W(r-r_j, h)\\) \\(\\nabla f(r) \\approx \\sum_j \\frac{m_j}{\\rho_j}(f(r_j)-f(r))\\nabla W(r-r_j, h)\\) , we call it the anti-symmetric form A more general case: \\[\\nabla f(r) \\approx \\sum_j m_j(\\frac{f(r_j)\\rho_j^{n-1}}{\\rho^n}-\\frac{nf(r)}{\\rho})\\nabla W(r-r_j, h)\\] When \\(n=-1\\) : \\(\\nabla f(r) \\approx \\rho\\sum_j m_j(\\frac{f(r_j)}{\\rho_j^2}+\\frac{f(r)}{\\rho^2})\\nabla W(r-r_j, h)\\) , we call it the symmetric form \u901a\u5e38\u4f1a\u4f7f\u7528\u4e00\u4e9b\u53cd\u5bf9\u79f0( anti-sym )\u6216\u5bf9\u79f0\u578b( sym )\u6765\u8fdb\u884c\u4e00\u4e9bSPH\u7684\u7a7a\u95f4\u6c42\u5bfc(spatial derivative)\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528SPH\u7684\u539f\u578b\u3002\u4f46\u4e24\u8005\u7684\u9009\u62e9\u662f\u4e2a\u7ecf\u9a8c\u6027\u7684\u95ee\u9898\uff0c\u5176\u4e2d\uff0c\u5f53 \\(f(r)\\) \u662f\u4e00\u4e2a\u529b\u7684\u65f6\u5019\uff0c\u4ece\u52a8\u91cf\u5b88\u6052\u7684\u89d2\u5ea6\u53bb\u63a8\u5bfc\uff0c\u4f7f\u7528 sym \u66f4\u597d\uff1b\u5f53\u505a\u6563\u5ea6\u3001\u9700\u8981\u6295\u5f71\u7684\u65f6\u5019\uff0c\u4f7f\u7528 anti-sym \u66f4\u597d\u3002 \u6216\u8bb8\u53ef\u4ee5\u8bf4\uff0c\u5f53 \\(f\\) \u662f\u7c92\u5b50 \\(i\\) \u548c \\(j\\) \u7684\u76f8\u4e92\u4f5c\u7528\u65f6\uff0c\u7528\u5bf9\u79f0\u578b\uff1b\u5f53 \\(f\\) \u662f\u7c92\u5b50\u672c\u8eab\u7684\u5c5e\u6027\u65f6\uff0c\u7528\u53cd\u5bf9\u79f0\u578b\uff1f Like to approximate the velocity gradient \\(\\nabla\\boldsymbol{v}\\) , using anti-symmtric form to ensure that the gradients of a constant velocity field vanish: \\[v_{\\alpha,\\beta}=\\frac{\\partial v^{\\alpha}}{\\partial x^{\\beta}}=\\sum_jV_j(v^{\\alpha}_j-v^{\\alpha}_i)\\cdot\\nabla_iW_{ij}^{\\beta}\\]","title":"Improving approximations for spatial derivatives"},{"location":"foundation/#kernel-functions","text":"","title":"Kernel functions"},{"location":"foundation/#pairing-instability","text":"@bui lecture A commmon misconception of SPH: Wrong choice of kernel function lead to \"pairing instability\" and this was often cited as SPH instability issue! The source of pairing instability in SPH comes from the gradient term \\(\\nabla_iW_{ij}\\) : Each kernel function could only accomodate a certain number of particles, which means forcing more particles in a kernel approximation cause SPH errors. Each kernel function has a inflection point (i.e. zero kernel gradient), which means particles at this point would not gain enough repulsive force due to SPH errors. However, the appropriate choice of kernel function and its parameters would completely eliminate pairing instability issues. Remarks : Pairing instability issue only occurs in a situation where there are more neighbouring particles in the influence domain that a kernel function can accodomate. Kernel functions whose Fourier transformation is negative for some wave vectors will trigger pairing instability at sufficient large number of neighbouring particles. (So that's why Wendland C2 kernel function wins, because all of its Fourier transformations for wave vectors are positive.) If we actually use a suitable kernel function with a suitable supporting length, we don't have the problem of pairing instability, and this issue is not because SPH instability.","title":"Pairing instability"},{"location":"foundation/#the-cubic-spline-kernel","text":"@bui2021 \\[W_{ij}=W(\\boldsymbol{r}, h)=k_d\\begin{cases} \\frac{2}{3}-q^2+\\frac{1}{2}q^3, &0\\leq q \\leq 1 \\\\ \\frac{1}{6}(2-q)^3, &1 < q \\leq 2 \\\\ 0, &otherwise \\end{cases} \\] where \\(q = \\Vert\\boldsymbol{r}\\Vert/h\\) , \\(k_d\\) is the kernel normalization factors for respective dimensions \\(d=1,2,3\\) and \\(k_1=\\frac{1}{h}\\) , \\(k_2=\\frac{15}{7\\pi h^2}\\) , \\(k_3=\\frac{3}{2\\pi h^3}\\) . The first-order derivation: \\[\\nabla W_{ij}=\\frac{\\partial W}{\\partial x_i}=\\frac{\\partial W}{\\partial q}\\cdot\\frac{\\partial q}{\\partial r}\\cdot\\frac{\\partial r}{\\partial x_i}=\\frac{\\partial W}{\\partial q}\\cdot\\frac{1}{h}\\cdot\\frac{x_i-x_j}{\\Vert\\boldsymbol{r}\\Vert},\\ \\boldsymbol{r}=x_i-x_j \\] \\[\\frac{\\partial W}{\\partial q}=k_d\\begin{cases} \\frac{3}{2}q^2-2q, &0\\leq q \\leq 1 \\\\ -\\frac{1}{2}(2-q)^2, &1 < q \\leq 2 \\\\ 0, &otherwise \\end{cases} \\] The second-order derivation: \\[\\nabla^2W_{ij}=\\frac{\\partial^2 W}{\\partial x_i^2}=\\frac{\\partial}{\\partial x_i}(\\frac{\\partial W}{\\partial x_i})=\\frac{\\partial^2 W}{\\partial q^2}\\cdot(\\frac{\\partial q}{\\partial r}\\cdot\\frac{\\partial r}{\\partial x_i})^2=\\frac{\\partial^2 W}{\\partial q^2}\\cdot\\frac{1}{h^2}\\cdot\\frac{(x_i-x_j)^2}{\\Vert\\boldsymbol{r}\\Vert^2} \\] \\[\\frac{\\partial^2 W}{\\partial q^2}=k_d\\begin{cases} 3q-2, &0\\leq q \\leq 1 \\\\ 2-q, &1 < q \\leq 2 \\\\ 0, &otherwise \\end{cases} \\] QUESTIONS The second-order derivation is wrong!!!!!!!!!!!!!!!!!! Why \\(0<q<2\\) ? The support domain should be \\(h\\) , or \\(2h\\) ? It only depends on the choice and should be \\(2\\) in kernel function but \\(h\\) in neighbor search? ANSWER : @peng lecture. \\(h\\) is called \"smoothing length\" and controls the shape of kernel function, \\(\\kappa h\\) is the compact support radius determining the region of support domain, also the neighbour search condition should be \\(|\\boldsymbol{x}_i-\\boldsymbol{x}_j|\\le\\kappa h\\) . \\(\\kappa\\) is usually taking as \\(2\\) . @koschier2019 \\[W_{ij}=W(\\boldsymbol{r}, h)=k_d\\begin{cases} 6(q^3-q^2)+1, &0\\leq q \\leq 0.5 \\\\ 2(1-q)^3, &0.5 < q \\leq 1 \\\\ 0, &otherwise \\end{cases}\\] where \\(q = \\Vert\\boldsymbol{r}\\Vert/h\\) , \\(k_d\\) is the kernel normalization factors for respective dimensions \\(d=1,2,3\\) and \\(k_1=\\frac{4}{3h}\\) , \\(k_2=\\frac{40}{7\\pi h^2}\\) , \\(k_3=\\frac{8}{\\pi h^3}\\) .","title":"The cubic spline kernel"},{"location":"foundation/#the-wendland-c2-kernel","text":"@bui2021 2.3 \\[W_{ij}=W(\\boldsymbol{r}, h)=k_d\\begin{cases} (1-0.5q)^4(1+2q), &0\\leq q \\leq 2 \\\\ 0, &otherwise \\end{cases}\\] where \\(q = \\Vert\\boldsymbol{r}\\Vert/h\\) , \\(k_d\\) is the kernel normalization factors for respective dimensions \\(d=2,3\\) and \\(k_2=\\frac{7}{4\\pi h^2}\\) , \\(k_3=\\frac{21}{2\\pi h^3}\\) . For 1d, the formulation is changed. The kernel is \\(C^2\\) continuous. The first-order derivation: \\[\\nabla_i W_{ij}^{\\alpha}=k_d(-5q)(1-0.5q)^3\\cdot\\frac{1}{h}\\cdot\\frac{x_i^{\\alpha}-x_j^{\\alpha}}{\\Vert\\boldsymbol{r}\\Vert}\\] The second-order derivation: ???","title":"The Wendland C2 kernel"},{"location":"foundation/#cspm-gradient-normalisation","text":"@Bui2021, @Chalk2020, @Chen1999 A corrective term can be multiplied to the smoothing kernel to improve the accuracy of the SPH approximation. The Corrective Smoothed Particle Method (CSPM) increases the accuracy of the kernel via a normalisation procedure, which is based on a Taylor series expansion of the SPH equations. After doing the Taylor expansion of \\(f_j\\) : \\[f_j=f_i+\\frac{\\partial f_i}{\\partial \\boldsymbol{x}_i^{\\alpha}}(\\boldsymbol{x}_j-\\boldsymbol{x}_i)^{\\alpha}+O(h^2)\\] Neglecting all the derivative terms, we have the corrective kernel estimate: \\[f_i\\approx\\sum_jV_jf_jW_{ij}\\approx f_i{\\color{Salmon}\\sum_jV_jW_{ij}}+O(h)\\] where the term \\({\\color{Salmon} 1}\\) should be \\(1\\) . Then divide the \\({\\color{Salmon} 1}\\) term, leading to: \\[f_i\\approx\\frac{\\sum_jV_jf_jW_{ij}}{\\sum_jV_jW_{ij}}=\\sum_jV_jf_jW_{ij}^{CSPM}\\] \\[W_{ij}^{CSPM}=\\frac{W_{ij}}{\\sum_kV_kW_{ik}}\\] and for the first derivative: \\[\\nabla^{\\beta}f_i\\approx\\sum_jV_jf_j\\nabla^{\\beta}_iW_{ij}\\approx f_i{\\color{Salmon} \\sum_jV_j\\nabla^{\\beta}_iW_{ij}}+\\frac{\\partial f_i}{\\partial \\boldsymbol{x}_i^{\\alpha}}{\\color{Green} \\sum_jV_j(\\boldsymbol{x}_j-\\boldsymbol{x}_i)^{\\alpha}\\nabla^{\\beta}_iW_{ij}}+O(h^2)\\] where the term \\({\\color{Salmon} 1}\\) should be \\(0\\) and the term \\({\\color{Green} 2}\\) should be \\(1\\) or \\(\\delta^{\\alpha\\beta}\\) . To completely eliminate these errors, one could subtract the \\({\\color{Salmon} 1}\\) term and then divide the \\({\\color{Green} 2}\\) term, leading to the normalised SPH formulation for the kernel derivative: \\[\\nabla f_i\\approx\\sum_{j=1} V_j(f_j-f_i)\\boldsymbol{L_{ij}}\\nabla_i W_{ij}=\\sum_{j=1} V_j(f_j-f_i)\\nabla_iW_{ij}^{CSPM}\\] \\[\\boldsymbol{L_{ij}}=[\\sum_jV_j(\\boldsymbol{x}_j-\\boldsymbol{x}_i)^{\\alpha}\\nabla^{\\beta}_iW_{ij}]^{-1}\\] \\[\\nabla_iW_{ij}^{CSPM}=[\\sum_kV_k(\\boldsymbol{x}_k-\\boldsymbol{x}_i)^{\\alpha}\\nabla^{\\beta}_iW_{ik}]^{-1}\\nabla_i W_{ij} \\] \\(\\boldsymbol{L}_{ij}\\) is the normalised matrix. This formulation has second order accuracy. Additionally, it also removes the boundary effects. But although it is a good operator, it also may become a bad one. Such as in formulations that DO NOT conserve linear momentum like force and stress. So we need an operator to conserve both linear and angular momenta.","title":"CSPM gradient normalisation"},{"location":"foundation/#shepard-correction","text":"@Liu2012, @Shepard1968, @Reinhardt2019 The Shepaard correction of the smoothing kernel \\(W\\) addresses errors introduced by the SPH discretization process due to irregularly distributed particels inside the material domain. Especially near open boundaries (e.g. fluid-air interfaces), the computation of the fluid quantity is error-prone due to the lack of neighboring particles. The corrected kernel function is: \\[W_{ij}^{sh}=\\frac{W_{ij}}{\\sum_kV_kW_{ik}}\\] And this is a zero-order reinitialization [@pysph]. QUESTIONS Isn't it the CSPM for \\(f_i\\) ?","title":"Shepard correction"},{"location":"foundation/#mls-correction","text":"@Nguyen2017, @Liu2012, @Dilts1999, @Belytschko1998 The moving least square (MLS) method is adopted to correct the kernel function. \\[W_{ij}^{MLS}=[\\beta_0+\\beta_x(x_i-x_j)+\\beta_y(y_i-y_j)]W_{ij}\\] where \\[[\\beta_0,\\beta_x,\\beta_y]^T=(\\sum_jV_j\\boldsymbol{A}W_{ij})^{-1}[1,0,0]^T\\] \\[\\boldsymbol{A}=\\left[\\begin{matrix} 1 &x_i-x_j &y_i-y_j \\\\ x_i-x_j &(x_i-x_j)^2 &(x_i-x_j)(y_i-y_j) \\\\ y_i-y_j &(x_i-x_j)(y_i-y_j) &(y_i-y_j)^2 \\end{matrix}\\right]\\] or \\[\\boldsymbol{A}=pp^T\\ and\\ p=[1,\\ x_i-x_j,\\ y_i-y_j]^T\\] And this is the first order correction that reproduces exactly the linear variation of quantity. QUESTIONS Only suitable for 2D problems? How to compare with CSPM?","title":"MLS correction"},{"location":"foundation/#neighbour-search","text":"","title":"Neighbour search"},{"location":"foundation/#grid-method","text":"","title":"Grid method"},{"location":"foundation/#hash-grid-method","text":"","title":"Hash grid method"},{"location":"foundation/#boundary-treatment","text":"","title":"Boundary treatment"},{"location":"foundation/#types-of-boundary-conditions","text":"@Bui2021, @Bui lecture Like any other numerical methods, the treatment of boundary condditions in SPH is required to facilitate its applications to a wide range of engineering problems. Solid boundary conditions such as fully-fixed , free-slip (or free-roller ) or symmetric . Flexible confining stress boundary conditions such as prescribed pressure of confining stress in triaxial tests. Free-surface condition.","title":"Types of boundary conditions"},{"location":"foundation/#simplest-treatments-for-water","text":"@taichiCourse01-10 PPT p43 and 79-85 Mainly two styles: free surface and solid boundary Problems: There are not enough samples within the supporting radius. For free surface: Problem: Density \\(\\downarrow\\) , pressure \\(\\downarrow\\) ; and generate outward pressure. Solution: Clamp the negative pressure (everywhere); assume \\(p = max(0,k(\\rho-\\rho_0))\\) \u4f1a\u5bfc\u81f4\u6db2\u9762\u53ef\u80fd\u4f1a\u5411\u5916\u81a8\u80c0\u4e00\u70b9 For solid boundary: Problem: Density \\(\\downarrow\\) , pressure \\(\\downarrow\\) ; and fluid leakage (due to outbound velocity) Solution: \\(p = max(0,k(\\rho-\\rho_0))\\) ; Solution for leakage: Reflect the outbound velocity when close to boundary. \u8fd8\u53ef\u4ee5\u5c06\u5782\u76f4\u8fb9\u754c\u65b9\u5411\u7684\u901f\u5ea6\u4e58\u4e0a\u4e00\u4e2a\u8870\u51cf\u503c\u3002\u8fd9\u6837\u5904\u7406\u5927\u62b5\u5e94\u8be5\u662f\u4e0d\u4f1a\u5bfc\u81f4\u7c92\u5b50\u98de\u51fa\u53bb\u3002 Pad a layer of solid particles (or called ghost particles, dummy particles) underneath the boundaries with \\(\\rho_{solid} = \\rho_0\\) and \\(v_{solid} = 0\\) . \u603b\u4f53\u6765\u8bf4\u6bd4\u65b9\u6cd51\u7a33\u5b9a\uff0c\u4f46\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fb9\u754c\u9644\u8fd1\u7c92\u5b50\u7684\u6570\u503c\u9ecf\u6ede\u3002 QUESTIONS \u591a\u4ecb\u8d28\u7684\u6d41\u4f53\u6df7\u5408\u65f6\uff0c\u591a\u4ecb\u8d28\u7684\u754c\u9762\uff1f\uff1f\uff1f","title":"Simplest treatments for water"},{"location":"foundation/#free-surface-problems","text":"The particles that comprise the free surface should satisfy a stress-free condition. When considering large deformations this first requires the detection of free surface particles, followed by a transformation of the stress tensor so that the normal and tangential components are 0. QUESTIONS BUT how does the free surface condition implement?","title":"Free surface problems"},{"location":"foundation/#dummy-particles-or-fixed-boundary-particles","text":"@Chalk2020, @Bui2021, @Zhao2019 \u865a\u62df\u7684\u8fb9\u754c\u7c92\u5b50\uff0c\u672c\u8eab\u4e0d\u5177\u6709\u5177\u4f53\u7684\u5c5e\u6027\u6570\u503c\u3002\u5728\u6bcf\u4e00\u4e2aStep\u4e2d\uff0c\u5728\u6bcf\u4e00\u4e2a\u7c92\u5b50\u7684\u8ba1\u7b97\u4e2d\uff0c\u5148\u52a0\u5165\u4e00\u4e2a\u5bf9Dummy particle\u5bf9\u5e94\u5c5e\u6027\u7684\u8d4b\u503c\u3002 The dummy particle (or ghost particle) method is used to represent the wall boundary. For dummy particles outside the wall boundary, they are spaced apart by \\(\\Delta x\\) . For repulsive particles at the wall boundary, are \\(\\Delta x/2\\) . For an interior particle A (circle) that contains a dummy particle B (square) within its neighbourhood, the normal distances \\(d_A\\) and \\(d_B\\) to the wall are calculated. An artificial velocity \\(\\boldsymbol{v}_B\\) is then assigned to the dummy particle: \\[\\boldsymbol{v}_B = -\\frac{d_B}{d_A}\\boldsymbol{v}_A\\] To account for extremely large values of the dummy particle velocity when an interior particle approaches the boundary (and \\(d_A\\) approaches 0), a parameter \\(\\beta\\) is introduced: \\[\\boldsymbol{v}_B = (1-\\beta)\\boldsymbol{v}_A+\\beta\\boldsymbol{v}_{wall}\\ ,\\ \\beta = min(\\beta_{max}, 1+\\frac{d_B}{d_A})\\] \\(\\beta_{max}\\) have been found to be between \\(1.5\\rightarrow2\\) , and here we use \\(\\beta_{max}=1.5\\) . And we have \\(\\boldsymbol{\\sigma}_B=\\boldsymbol{\\sigma}_A\\) and \\(p_B=p_A\\) , etc. The simple definition ensures that there is a uniform stress distribution for the particles that are near the wall boundaries, and it contributes to smooth stress distributions (through the \\(\\boldsymbol{f}^{\\sigma}\\) term) on the interior particles in the equation of momentum through the particle-dummy interaction. From Bui's lecture , the stress and velocity of fixed boundary particles ( \\(a\\) ) can also be interpolated from real particles ( \\(b\\) ). For the fully-fixed boundary: \\[\\boldsymbol{v}_i^a=-\\sum_jV_i^b\\boldsymbol{v}_i^b\\widetilde{W}_{ij},\\ \\boldsymbol{\\sigma}_i^a=\\sum_jV_i^b\\boldsymbol{\\sigma}_i^b\\widetilde{W}_{ij}\\] While for the free-slip boundary: \\[\\boldsymbol{v}_i^{a,n}=\\sum_jV_j^b(\\boldsymbol{v}_i^{a,n}-2\\boldsymbol{v}_j^{b,n})\\widetilde{W}_{ij}\\ or\\ \\boldsymbol{v}_i^{a,n}=-\\sum_jV_j^b\\boldsymbol{v}_j^{b,n}\\widetilde{W}_{ij},\\ \\boldsymbol{v}_i^{a,t}=\\sum_jV_j^b\\boldsymbol{v}_j^{b,t}\\widetilde{W}_{ij}\\] \\[\\sigma_i^{a, \\alpha\\beta}=\\begin{cases} \\sum_jV_j^b\\sigma_j^{b, \\alpha\\beta}\\widetilde{W}_{ij}, &\\alpha=\\beta \\\\ -\\sum_jV_j^b\\sigma_j^{b, \\alpha\\beta}\\widetilde{W}_{ij}, & \\alpha \\neq \\beta \\end{cases}\\] where \\(\\boldsymbol{v}^{a,n}\\) and \\(\\boldsymbol{v}^{a,t}\\) are the normal and shear velocity components of particle \\(a\\) with respect to the solid boundary surface. To calculate the normal vector for each particle on the open boundary, refer to @Zhao2019 Sec 4.1 .","title":"Dummy particles (or fixed-boundary particles)"},{"location":"foundation/#a-soft-repulsive-force","text":"@Chalk2020, Liu2012 This is a coupled dynamic solid boundary treatment. The repulsive particles (triangle) are set to apply the no-slip effect and always guarantee that the particles do not penetrate the wall boundary. They can apply a soft repulsive force to the particles near the wall boundary, which is incorporated as a body force in the momentum equation. The definition of the repulsive force is introduced that prevents particle penetration without obviously disturbing the interior particels. The force \\(\\hat{\\boldsymbol{F}}_{ij}\\) is applied to all particles that interact with the repulsive boundary particles, and is included in the SPH momentum equation: \\[\\hat{\\boldsymbol{F}}_{ij} = \\sum_j 0.01c^2\\chi\\cdot\\hat{f}(\\gamma)\\frac{\\boldsymbol{x}_{ij}}{r^2}\\] where: \\[\\chi = \\left\\{ \\begin{array}{ll} 1-\\frac{r}{1.5\\Delta x}, &0\\leq r<1.5\\Delta x \\\\0, &r\\geq 1.5\\Delta x \\end{array} \\right.\\] \\[\\gamma = \\frac{r}{0.75h_{ij}}\\] \\[\\hat{f}(\\gamma) = \\left\\{ \\begin{array}{ll} \\frac{2}{3}, &0<\\gamma\\leq\\frac{2}{3}\\\\ 2\\gamma-1.5\\gamma^2, &\\frac{2}{3}<\\gamma\\leq 1\\\\ 0.5(2-\\gamma)^2, &1<\\gamma<2\\\\ 0, &\\gamma\\geq 2 \\end{array} \\right.\\] And this soft repulsive force was combined with dummy particles and applied to simulations of water flow and the propagation of a Bingham material.","title":"A \"soft\" repulsive force"},{"location":"foundation/#time-integration-and-advection","text":"","title":"Time integration and advection"},{"location":"foundation/#courant-friedrichs-lewy-cfl","text":"@Bui2021 3.6, Yang2021 2.5 and Koschier2019 2.9 The CFL condition is a necessary condition for the convergence of numerical solvers for differential equations and, as a result, provides an upper bound for the time step width. The size of \\(\\Delta t\\) is determined using the Courant-Friedrichs-Lewy (CFL) stability condition, which, for SPH states that: \\[\\Delta t=C_{CFL}\\frac{h}{\\Vert \\boldsymbol{v}^{max}\\Vert}\\] where a suitable constant value for \\(C_{CFL}\\) was found to be 0.2 from Yang2021, 0.1 from Bui2021, 0.4 from Koschier2019. \\(h\\) is the smoothing length and \\(\\boldsymbol{v}^{max}\\) is the velocity at which the fastest particle travels, which can be the speed of sound \\(c\\) of the material with \\(c=\\sqrt{E/\\rho}\\) .","title":"Courant-Friedrichs-Lewy (CFL)"},{"location":"foundation/#symp-euler-symplectic-euler-se","text":"@taichiCourse01-10 PPT p77 Also referred to as semi-implicit Euler or Euler-Cromer scheme. \\[v_i^* = v_i+\\Delta t\\frac{{\\rm d}v_i}{{\\rm d}t},\\ \\ x_i^* = x_i+\\Delta tv_i^*\\]","title":"Symp Euler - Symplectic Euler (SE)"},{"location":"foundation/#leap-frog-lf","text":"@yang2021 Leap-Frog(LF) time-integration scheme is sufficiently stable, accurate, and fast due to only requiring one calculation of forces for each timestep. For a given time-step, the density and velocity are brought forward to the mid-increment using material derivatives from the previous timestep(if available), and the position is updated at full-increments: \\[f_{n+\\frac{1}{2}}=f_n+\\frac{\\Delta t}{2}(\\frac{{\\rm D}f}{{\\rm D}t})_{n-1}\\] \\(f\\) is density or velocity or stress. Then calculate \\((\\frac{{\\rm D}f}{{\\rm D}t})_{n}\\) \\[f_{n+1}=f_n+\\Delta t(\\frac{{\\rm D}f}{{\\rm D}t})_{n}\\] \\[\\boldsymbol{x}_{n+1}=\\boldsymbol{x}_n+\\Delta t\\times\\boldsymbol{u}_{n+1}\\]","title":"Leap-Frog (LF)"},{"location":"foundation/#rk4-4th-order-runge-kutta-rk4","text":"@Chalk2020 Appendix B. The RK4 scheme has fourth order accuracy and relatively simple implementation. Consider a general ordinary differential equation for a variable \\(\\phi\\) with an initial condition \\(\\phi^0\\) at an initial time \\(t^0\\) : \\[\\dot{\\phi} = f(t, \\phi),\\ \\phi(t^0) = \\phi^0\\] where \\(f\\) is a function of \\(\\phi\\) and time \\(t\\) . The RK4 method is employed to increment \\(\\phi\\) by a time step \\(\\Delta t\\) to obtain the solution at time \\(t = t+\\Delta t\\) : \\[\\phi^{t+\\Delta t}=\\phi^t+\\frac{\\Delta t}{6}(k_1+2k_2+2k_3+k_4)\\] \\[k_1=f(\\phi_1),\\ k_2=f(\\phi_2),\\ k_3=f(\\phi_3),\\ k_4=f(\\phi_4)\\] \\[\\phi_1=\\phi^t,\\ \\phi_2=\\phi^t+\\frac{\\Delta t}{2}k_1,\\ \\phi_3=\\phi^t+\\frac{\\Delta t}{2}k_2,\\ \\phi_4=\\phi^t+\\Delta tk_3\\]","title":"RK4 - 4th order Runge-Kutta (RK4)"},{"location":"foundation/#xsph","text":"In addition to the velocity and stress, the position vectors of each particle \\(\\boldsymbol{x}_i\\) are updated via the XSPH method at the end of each time step as: \\[\\frac{{\\rm d} \\boldsymbol{x}_i}{{\\rm d} t} = \\boldsymbol{v}_i + \\epsilon_x\\sum_j\\frac{m_j}{\\rho_j}(\\boldsymbol{v}_j - \\boldsymbol{v}_i)\\nabla W_{ij}\\] Alternatively, the discretised XSPH equation is: \\[\\boldsymbol{x}_i^{t+\\Delta t} = \\boldsymbol{x}_i^t + \\Delta t\\frac{{\\rm d} \\boldsymbol{x}_i}{{\\rm d} t} = \\boldsymbol{x}_i^t + \\Delta t(\\boldsymbol{v}_i^{t+\\Delta t} + \\epsilon_x\\sum_j\\frac{m_j}{\\rho_j}(\\boldsymbol{v}_j - \\boldsymbol{v}_i)\\nabla W_{ij})\\] where \\(\\epsilon_x\\) is a tuning para, \\(0\\leq\\epsilon_x\\leq1\\) . While, in standard SPH, the simplest way is: \\[\\frac{{\\rm d} \\boldsymbol{x}_i}{{\\rm d} t} = \\boldsymbol{v}_i\\] And for the particle position update (Leap-Frog): \\[\\boldsymbol{x}_i^{t+\\Delta t} = \\boldsymbol{x}_i^t + {\\Delta t}\\boldsymbol{v}_i^{t+\\frac{\\Delta t}{2}}\\ and\\ \\boldsymbol{v}_i^{t+\\frac{\\Delta t}{2}} = \\frac{1}{2}(\\boldsymbol{v}_i^{t+\\Delta t}+\\boldsymbol{v}_i^t)\\] or just Symplectic Euler: \\[\\boldsymbol{x}_i^{t+\\Delta t} = \\boldsymbol{x}_i^t + {\\Delta t}\\boldsymbol{v}_i^{t+\\Delta t}\\]","title":"XSPH"},{"location":"foundation/#numerical-oscillations-and-dissipations-in-sph","text":"","title":"Numerical oscillations and dissipations in SPH"},{"location":"foundation/#artificial-viscosity-standard-approach","text":"@bui2021 3.3, @chalk2020 4.5.1, @nguyen2017, @Adami2012, from @Monaghan1983 The fully dynamic equation would cause SPH particles to freely oscillate due to even small unbalanced forces, most of which is attributed to the zero-energy mode produced by the anti-symmetric kernel function with zero kernel gradient at the inflection point. However, this oscillation of SPH particles or material points is a common issue associated with any numerical method used to solve the fully dynamic motion equation. An adapted artificial viscosity was implemented with SPH to dampen the irregular particle motion and pressure fluctuations, and to prevent the non-physical collisions of two approaching particles. The artificial viscosity term \\(\\Pi_{ij}\\) is included in the SPH momentum equation as: \\[\\frac{{\\rm D}\\boldsymbol{v}_i}{{\\rm D}t}=\\sum_jm_j(\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2}+\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2}+\\Pi_{ij}\\boldsymbol{I})\\cdot\\nabla_iW_{ij}+\\boldsymbol{f}^{ext}_i\\] And the most widely used form of artificial viscosity is: \\[\\Pi_{ij}=\\begin{cases} \\frac{-\\alpha_{\\Pi}c_{ij}\\phi_{ij}+\\beta_{\\Pi}\\phi_{ij}^2}{\\rho_{ij}},&\\boldsymbol{v}_{ij}\\cdot\\boldsymbol{x}_{ij}<0\\\\ 0,&\\boldsymbol{v}_{ij}\\cdot\\boldsymbol{x}_{ij}\\ge0\\\\ \\end{cases}\\] \\[\\phi_{ij}=\\frac{h_{ij}\\boldsymbol{v}_{ij}\\cdot\\boldsymbol{x}_{ij}}{\\Vert\\boldsymbol{x}_{ij}\\Vert^2+\\varepsilon h_{ij}^2}\\] \\[c_{ij}=\\frac{c_i+c_j}{2},\\ \\rho_{ij}=\\frac{\\rho_i+\\rho_j}{2},\\ h_{ij}=\\frac{h_i+h_j}{2},\\ \\boldsymbol{x}_{ij}=\\boldsymbol{x}_i-\\boldsymbol{x}_j,\\ \\boldsymbol{v}_{ij}=\\boldsymbol{v}_i-\\boldsymbol{v}_j\\] where \\(\\alpha_{\\Pi}\\) and \\(\\beta_{\\Pi}\\) are problem dependent tuning parameters, \\(c\\) is the speed of sound. \\(\\alpha_{\\Pi}\\) is associated with the speed of sound and is related to the linear term, while \\(\\beta_{\\Pi}\\) is associated with the square of the velocity and has little effect in problems where the flow velocity is not comparable to the speed of sound. \\(\\varepsilon=0.01\\) is a numerical parameter introduced to prevent numerical divergences, only to ensure a non-zero denominator. This artificial viscosity is applied only for interactions between material particles, i.e. no artificial dissipation is introduced for the interaction of dummy particles and real particles. A disadvantage of using the artificial viscosity is that parameter tuning may be required to obtain the optimal values which are not directly associated with any physical properties. The use of the artificial viscosity in SPH simulations is purely for the purposes of numerical stabilisation.","title":"Artificial viscosity - standard approach"},{"location":"foundation/#alternative-viscous-damping-term","text":"@bui2021 3.3, @chalk2020 4.5.1, @nguyen2017 Alternative damping terms can be used instead of the artificial viscosity that have more physical relevance to the problem, or require less calibration. The following velocity-dependent damping term can be included as a body force in the equation of the momentum: \\[\\boldsymbol{F}_d=-\\mu_d\\boldsymbol{v}\\] \\(\\mu_d\\) is the damping factor which can be computed by \\(\\mu_d=\\xi\\sqrt{E/\\rho h^2}\\) with \\(\\xi\\) being a non-dimensional damping coefficient that requires calibrations for different applications. For the simulation of granular flows, such as the flow of granular column collapse experiments in Nguyen2017 , a constant value of \\(\\xi=5\\times10^{-5}\\) is recommended.","title":"Alternative viscous damping term"},{"location":"foundation/#stressstrain-regularisation","text":"@bui2021 3.3, @nguyen2017 While the kinematics of SPH simulation is generally realistic, the stress-pressure fields of SPH particles undergoing large deformation can exhibit large oscillations. This problem is known as the sort-length-scale-noise and is identified as one of the key challenges of the standard SPH method tha needs to be addressed in order to improve the accuracy of SPH simulations. The problem becomes worse when the artificial viscosity is not adopted in SPH simulations, although the viscous damping force could slow down the numerical instability process. Nguyen2017 suggests regularising the stresses and strains of each SPH particle over its kernel integral domain after a certain number of computational cycles and uses MLS method: \\[\\langle\\boldsymbol{\\sigma}_{i}\\rangle=\\sum_jV_j\\boldsymbol{\\sigma}_{j}W^{MLS}_{ij}\\] \\[\\langle\\boldsymbol{\\epsilon}_{i}\\rangle=\\sum_jV_j\\boldsymbol{\\epsilon}_{j}W^{MLS}_{ij}\\] And Nguyen2017 suggestes applying the above MLS correction every 5 steps.","title":"Stress/strain regularisation"},{"location":"foundation/#tensile-instability","text":"","title":"Tensile instability"},{"location":"soil/","text":"SPH for soil Constitutive model of soil Constitutive model is a core component of a computational framework used to describe how a material behaves under external loads. A constitutive equation is required to relate the soil stresses to the strain rates. In the application of CFD approach to model geomaterials using SPH, the materials are considered to either be fluid-like materials (i.e. liquefied materials) or have reached its critical state. However, the key drawback of this type of constitutive model is that it cannot describe complex responses of geomaterials, including the hardening or/and softening processes before reaching the critical state of soils. Advanced constitutive models were built on the basis of continuum plasticity theory. A simple elastic-perfectly plastic model for soil @bui2021 3.2.1.1. Standard CFD approach for \\(c-\\varphi\\) soils. The shear stresses increase linearly with the incresing shear strain and thus cannot capture the plastic response. A simple approach is to restrict the development of shear stresses when the materials enter the plastic flow regime without actually solving the plastic deformation. (\u5373\u4e0d\u8ba1\u7b97\u5851\u6027\u53d8\u5f62\uff0c\u5f53\u6750\u6599\u8fdb\u5165\u5851\u6027\u6d41\u52a8\u72b6\u6001\u65f6\uff0c\u76f4\u63a5\u6309\u7167M-C\u5f3a\u5ea6\u51c6\u5219\u7ea6\u675f\u526a\u5e94\u529b) The stress tensor is decomposed into the isotropic pressure \\(p\\) and deviatoric stress \\(\\boldsymbol{s}\\) : \\[\\boldsymbol{\\sigma}=p\\boldsymbol{I}+\\boldsymbol{s}\\] \\(p\\) is computed using an equation of state (EOS) which is often formulated as a function of density change and sound speed. For geomechanics applications, following the general Hooke's law: \\[p=K\\frac{\\Delta V}{V_0}=K(\\frac{\\rho}{\\rho_0}-1)\\] On the other hand, the deviatoric shear stress can be estimated using the general Hooke's law for elastic materials : \\[\\dot{\\boldsymbol{s}}=2G(\\dot{\\boldsymbol{\\epsilon}}-\\frac{1}{3}\\boldsymbol{I}\\dot{\\epsilon}_v)\\] The plastic regime for general soils can be determinded by the Mohr-Coulomb failure criterion: \\[\\tau_f=c+p\\tan{\\varphi}\\] where \\(\\tau_f=\\sqrt{\\frac{3}{2}\\boldsymbol{s}:\\boldsymbol{s}}\\) is the maximum shear stress at failure. When the soil enters its plastic flow regime, the shear stress components are scaled back to the yield surface. \\(\\mu(I)\\) -rheological constitutive model @bui2021 3.2.1.2. and yang2021 2.2 The \\(\\mu(I)\\) -rheological model is one of the most commonly used and widely validated rheological models, developed to capture the rate-dependent and inertial effect of granular materials in the dense flow regime. It was derived based on the Bingham constitutive relation for non-Newtonian fluids. It assumes the materials behave as a rigid body or stiff elastic response before yielding and then quickly reaching their plastic flow behaviour. (\u5047\u8bbe\u6750\u6599\u5728\u5c48\u670d\u524d\u8868\u73b0\u4e3a\u521a\u4f53\u6216\u521a\u6027\u5f39\u6027\u54cd\u5e94\uff1f\u7136\u540e\u8fc5\u901f\u8fbe\u5230\u5176\u5851\u6027\u6d41\u52a8\u72b6\u6001\u5373\u5c48\u670d\u540e\u7684\u4e34\u754c\u72b6\u6001) It separates the stress tensor into an isotropic pressure and viscous shear stress tensor, and the viscous shear stress is then defined as a function of total strain-rate: \\[\\boldsymbol{\\sigma}=-p\\boldsymbol{I}+\\boldsymbol{\\tau}\\] \\[\\boldsymbol{\\tau}=2\\eta\\dot{\\boldsymbol{\\epsilon}},\\ \\eta=\\frac{\\mu(I)p}{\\sqrt{2(\\dot{\\boldsymbol{\\epsilon}}:\\dot{\\boldsymbol{\\epsilon}})}},\\ \\mu(I)=\\mu_s+\\frac{\\mu_2-\\mu_s}{I_0/I+1}\\] where \\(\\eta\\) is an effective viscosity, when \\(\\dot{\\boldsymbol{\\epsilon}}\\rightarrow0\\) , it diverges to infinity and this ensures the material behaviour is rigid or very stiff when the strain rate is very small or at the static condition and thus guaranteeing the existence of a field criterion; \\(\\dot{\\boldsymbol{\\epsilon}}\\) is the total strain-rate tensor; \\(\\mu\\) is a frictional function dependent on the inertial number \\(I=d_s\\sqrt{2(\\dot{\\boldsymbol{\\epsilon}}:\\dot{\\boldsymbol{\\epsilon}})}/\\sqrt{p/\\rho_s}\\) with \\(d_s\\) being the grain diameter, \\(\\rho_s\\) being the solid density; \\(\\mu_2\\) and \\(I_0\\) are both materials constants with \\(\\mu_2\\) being the critical friction angle at very high \\(I\\) ; and \\(\\mu_s\\) is the sratic friction coefficient, corresponding to the state of no plastic flow. Under the condition of the strain rate tensor in the limit of 0 ( \\(I\\rightarrow0\\) ), the second component of \\(\\mu(I)\\) will approach 0. This suggests that, under static condition, \\(\\mu(I)=\\mu_s\\) , which defines a yielding threshold above which yielding occurs. Accordingly, the following yield criterion, which takes the form of the Drucker-Prager-like criterion, can be defined: \\[|\\boldsymbol{\\tau}|\\leq\\mu_sp,\\ |\\boldsymbol{\\tau}|=\\sqrt{0.5(\\boldsymbol{\\tau}:\\boldsymbol{\\tau})}\\] The isotropic pressure can be defined alternltively, where the second one is commonly used in the SPH context to model quasi-compressible fluid: \\[p=K\\frac{\\Delta V}{V_0}=K(\\frac{\\rho}{\\rho_0}-1)\\ or\\ p=c^2(\\rho-\\rho_0)\\] where \\(c\\) is the speed of sound, which is assumed to be \\(10 v_{max}\\) (for Yang2021, it is \\(35m/s\\) and for Bui2021, it is \\(600m/s\\) ). Finally, it is noted that when incorporating this model, to avoid unphysical behaviour, the shear component of the stress tensor should be set to 0 for negative pressure value. In addition, the initial strain rate tensor should be set close to 0 (e.g. \\(10^{-7}\\) ) as 0 strain rates can result in mathematically undefined behaviour. To incorporate the shear strength of granular materials, here incorporates the Mohr-Coulomb yield criteria, which allows the yielding shear stress to be described as a function of pressure, as well as easily obtained material properties: \\[\\tau_y=c+p\\tan\\varphi\\] where \\(c\\) is cohesion and \\(\\varphi\\) is the internal angle of friction. The 1D modified Bingham shear stress: \\[\\tau=\\eta_0\\dot{\\boldsymbol{\\epsilon}}+c+p\\tan\\varphi\\] using an equivalent fluid viscosity, \\(\\eta\\) , for use in Navier-Stokes solvers: \\[\\eta=\\eta_0+\\frac{c+p\\tan\\varphi}{\\dot{\\boldsymbol{\\epsilon}}}\\] As for 3D simulation, the generalised form of the modified Bingham shear stress: \\[\\boldsymbol{\\tau}_i=\\eta_0\\dot{\\boldsymbol{\\epsilon}}_i+(c+p\\tan\\varphi)\\frac{\\dot{\\boldsymbol{\\epsilon}}_i}{\\sqrt{\\frac{1}{2}\\dot{\\boldsymbol{\\epsilon}}_i:\\dot{\\boldsymbol{\\epsilon}}_i}}\\] The above modified Bingham model can be thought of as a precursor to the \\(\\mu(I)\\) model, where the \\(\\mu(I)\\) model takes the dynamic viscosity \\(\\eta_0\\) and the cohesion \\(c\\) as 0, and also exchanges \\(\\tan\\varphi\\) for a scalar friction value. NOTE : the \\(\\mu(I)\\) model need the difference of density to generate pressure, so it is wrong to keep a constant density. Elastoplastic model @bui2021 3.2.2. This model was built on basis of continuum plasticity theory, in which a single mathematical relationship that relates the stress-increment to the strain-increment was established for a homogenous representative volume element which is assumed to remain homogenous. A yield surface and a plastic potential function \\(g\\) (or dilatancy rule) are then used to control the hardening or/and softening processes commonly observed in the materials. Elastic and plastic material behaviour are distinguished according to a specified yield function \\(f\\) . The fundamental assumption of plasticity is that the total soil strain rate \\(\\boldsymbol{\\dot\\epsilon}\\) can be divided into an elastic and a plastic component: \\[\\boldsymbol{\\dot\\epsilon} = \\boldsymbol{\\dot\\epsilon}^e+\\boldsymbol{\\dot\\epsilon}^p\\] The stress increment is then calculated from the generalised Hooke's Law: \\[\\dot{\\boldsymbol{\\sigma}}=\\boldsymbol{D}^e:\\dot{\\boldsymbol{\\epsilon}}^e=\\boldsymbol{D}^{ep}:\\dot{\\boldsymbol{\\epsilon}}\\] We define the elastic strains according to the generalised Hooke's Law: \\[\\dot{\\boldsymbol{\\epsilon}}^e = \\frac{\\dot{\\boldsymbol{s}}}{2G}+\\frac{1-2\\nu}{3E}\\dot{\\sigma}_{mm}\\boldsymbol{I},\\ \\dot{\\sigma}_{mm}=\\dot{\\sigma}_{xx}+\\dot{\\sigma}_{yy}+\\dot{\\sigma}_{zz}\\] And in plasticity-based models, the plastic srtain rate is defined via the plastic flow rule: \\[\\dot{\\boldsymbol{\\epsilon}}^p=\\dot{\\lambda}\\frac{\\partial g}{\\partial \\boldsymbol{\\sigma}}\\] where \\(\\dot{\\lambda}\\) is the so-called consistency parameter , a positive plastic-multiplier, and \\(g\\) is the plastic potential function . The plastic potential function describes the direction of plastic flow as a function of the stress tensor. For \\(g=f\\) , the flow rule is said to be associated. otherwise, it is non-associated. And in soil mechanics, the soil pressure \\(p\\) is obtained directly from the equation for hydrostatic pressure : \\[p = -\\frac{1}{3}(\\sigma_{xx}+\\sigma_{yy}+\\sigma_{zz})\\] QUESTIONS the hydrostatic pressure \\(p\\) , is positive or negtive? \\(\\boldsymbol{s}\\) is only correct when \\(p\\) is positive as Chalk2020's Appendix A, but in the main text of Chalk2020, \\(p\\) is negtive. STRETCH for positive and COMPRESS for negative? Answer : Generally it's negtive. When it is positive, the meaning is the average normal stress \\(\\sigma_m = -p\\) . Yield criteria For Drucker-Prager yield criteria: \\[f=\\sqrt{J_2}+\\alpha_{\\varphi}I_1-k_c=0\\] where the functions of the Coulomb material constants - the soil internal friction \\(\\varphi\\) and cohesion \\(c\\) : \\[\\alpha_{\\varphi}=\\frac{\\tan\\varphi}{\\sqrt{9+12\\tan^2\\varphi}}, k_c=\\frac{3c}{\\sqrt{9+12\\tan^2\\varphi}}\\] And for the elastoplastic constitutive equation of Drucker-Prager and non-associated flow rule \\[g=\\sqrt{J_2}+3I_1\\sin\\psi\\] where \\(\\psi\\) is dilatancy angle and in Chalk's thesis \\(\\psi=0\\) . And the Von Mises criterion is: \\[f = \\sqrt{3J_2}-f_c\\] The Von Mises and D-P yield criteria are illustrated in two dimensions: The increment of the yield function after plastic loading or unloading: \\[{\\rm d}f=\\frac{\\partial f}{\\partial \\boldsymbol{\\sigma}} {\\rm d}\\boldsymbol{\\sigma}\\] The stress state is not allowed to exceed the yield surface, and the yield function increment cannot be greater than 0. \\({\\rm d}f=0\\) ensures that the stress state remains on the yield surface during plastic loading. QUESTIONS How to calculate \\({\\rm d}f\\) ? ANSWER : \\({\\rm d}f = f^*-f\\) in advection. The elastoplastic constitutive equation After rearranging: \\[\\frac{\\partial \\sigma_{ij}}{\\partial t}=2G\\dot{e}_{ij}+K\\dot{\\epsilon}_{mm}\\delta_{ij}-\\dot{\\lambda}((K-\\frac{2}{3}G)\\frac{\\partial g}{\\partial \\sigma_{kl}}\\delta_{kl}\\delta_{ij}+2G\\frac{\\partial g}{\\partial \\sigma_{ij}})\\] The first two terms on the right hand side describe the elastic strain, while the latter term describes the plastic deformations (which is non-zero when plastic flow occurs). Upon substitution of plastic potential function and the Drucker-Prager yield function into the equation above: \\[\\frac{\\partial \\sigma_{ij}}{\\partial t}=2G\\dot{e}_{ij}+K\\dot{\\epsilon}_{mm}\\delta_{ij}-\\dot{\\lambda}(9K\\sin\\psi\\delta_{ij}+\\frac{G}{\\sqrt{J_2}}s_{ij}) \\] where \\[\\dot{\\lambda}=\\frac{3\\alpha_{\\varphi}K\\dot{\\epsilon}_{mm}+(G/\\sqrt{J_2})s_{ij}\\dot{\\epsilon}_{ij}}{27\\alpha_{\\varphi}K\\sin\\psi+G} \\] Stress adaptation @Bui2008 Section 3.3.1 and Chalk2019 Section 4.3.1 Consider both a Von Mises and a Drucker-Prager yield criterion to distinguish between elastic and plastic material behaviour. In the elastoplastic model, the stress state is not allowed to exceed the yield surface and we should apply a stress adaptation to particles, after every calculation step. The stress must be checked at every step and adapted if it does not lie within a valid range. First, the stress state must be adapted if it moves outside the apex of the yield surface, which is konwn as tension cracking , in the movement of the stress state at point E to point F. Tension cracking occurss when: \\(-\\alpha_{\\varphi}I_1+k_c<0\\) or \\(f\\ge\\sqrt{J_2}\\) . And in such circumstances, the hydrostatic stress \\(I_1\\) must be shifted back to the apex of the yield surface by adapting the normal stress components: \\[\\hat{\\boldsymbol{\\sigma}} = \\boldsymbol{\\sigma}-\\frac{1}{3}(I_1-\\frac{k_c}{\\alpha_{\\varphi}})\\] The second corrective stress treatment must be performed when the stress state exceeds the yield surface during plastic loading, as shown by the path A to B. For the D-P yield criterion, this occurs when: \\(-\\alpha_{\\varphi}I_1+k_c<\\sqrt{J_2}\\) or \\(0<f<\\sqrt{J_2}\\) . And the stress state must be scaleld back appropriately. For this, a scaling factor \\(r_{\\sigma}\\) is introduced: \\(r_{\\sigma} = (-\\alpha_{\\varphi}I_1+k_c) / \\sqrt{J_2}\\) . The deviatoric shear stress is then reduced via this scaling factor for all components of the stress tensor: \\[\\hat{\\sigma}_{ii} = r_{\\sigma}s_{ii}+\\frac{1}{3}I_1\\] \\[\\hat{\\sigma}_{ij} = r_{\\sigma}s_{ij}\\] The procedure of applying these two equations is referred to as the stress-scaling back procedure, or stress modification. In the SPH implementation of the elastoplastic model, the two corrective treatments described above are applied to the particles that have a stress state outside of the valid range. Viscoplastic Perzyna model The consistency parameter \\(\\dot{\\lambda}\\) is defined as: \\[\\dot{\\lambda}=\\gamma\\langle\\phi(F)\\rangle\\] where \\(\\gamma\\) is a fluidity parameter (acts as the reciprocal of viscosity) and \\(\\phi(F)\\) is a yield-type function. The \\(\\langle...\\rangle\\) symbol represents the Macaulay brackets: \\[\\langle\\phi\\rangle=\\begin{cases} \\phi,&\\phi\\ge0\\\\ 0,&\\phi<0\\\\ \\end{cases}\\] The function \\(\\phi(F)\\) is therefore defined as: \\[\\phi(F)=(\\frac{F-F_0}{F_0})^N\\] where \\(N\\) is a model parameter, \\(F\\) is a function of the stress state (related to the yield function), and \\(F_0\\) defines a critical stress value for plastic strains. Plastic flow occurs then \\(F>F_0\\) (the function \\(F\\) exceeds the critical value \\(F_0\\) ) and plastic strains are non-zero. ... ... In summary, the Perzyna constitutive model is defined as: \\[\\frac{\\partial \\sigma_{ij}}{\\partial t}=D^e_{ijkl}(\\dot{\\epsilon}_{kl}-\\gamma\\frac{\\partial g}{\\partial\\sigma_{kl}}(\\frac{F-F_0}{F_0})^N)\\] The implementation of the Von Mises yield criterion, with an associated flow rule ( \\(f=g\\) ): \\[F=\\sqrt{3J_2},\\ F_0=f_c\\] A generalised system of equations The general elastoplastic and viscoplastic Perzyna constitutive equations can be written in the following compact form: \\[\\frac{\\partial\\sigma_{ij}}{\\partial t}=D^e_{ijkl}\\dot{\\epsilon}_{kl}-g_{ij}^{\\epsilon^p}\\] where \\(g_{ij}^{\\epsilon^p}\\) is a function of the plastic strain, depending on the choice of constitutive model: \\[g_{ij}^{\\epsilon^p}=\\dot{\\lambda}((K-\\frac{2}{3}G)\\frac{\\partial g}{\\partial \\sigma_{kl}}\\delta_{kl}\\delta_{ij}+2G\\frac{\\partial g}{\\partial \\sigma_{ij}})\\] or \\[g_{ij}^{\\epsilon^p}=D^e_{ijkl}\\gamma\\frac{\\partial g}{\\partial\\sigma_{kl}}(\\frac{F-F_0}{F_0})^N\\] And for large deformation problems, the rate of stress must be adapted so that it is invariant with respect to large body rotations. The standard stress rate is replaced with the Jaumann stress rate: \\[\\dot{\\tilde{\\sigma}}_{ij}=\\dot{\\sigma}_{ij}-\\sigma_{im}\\dot{\\omega}_{jm}-\\sigma_{mj}\\dot{\\omega}_{im}\\] or \\[\\dot{\\tilde{\\boldsymbol{\\sigma}}}=\\dot{\\boldsymbol{\\sigma}}-\\boldsymbol{\\omega}\\boldsymbol{\\sigma}-\\boldsymbol{\\sigma}\\boldsymbol{\\omega}^T \\] Then the equation becomes: \\[\\frac{\\partial\\sigma_{ij}}{\\partial t}=\\sigma_{im}\\dot{\\omega}_{jm}-\\sigma_{mj}\\dot{\\omega}_{im}+D^e_{ijkl}\\dot{\\epsilon}_{kl}-g_{ij}^{\\epsilon^p}\\] Governing equations Conservation of mass: \\[\\frac{{\\rm D} \\rho}{{\\rm D} t}=-\\rho \\nabla\\cdot\\boldsymbol{v}\\] Conservation of momentum: \\[\\frac{{\\rm D} \\boldsymbol{v}}{{\\rm D} t}=\\frac{1}{\\rho} \\nabla\\cdot\\boldsymbol{\\sigma}+\\boldsymbol{f}^{ext}\\] Constitutive equation (in compact form): \\[\\frac{{\\rm D} \\boldsymbol{f}^{\\sigma}}{{\\rm D} t}=\\boldsymbol{\\tilde{\\sigma}} +\\nabla\\cdot\\boldsymbol{f}^v-\\boldsymbol{g}^{\\epsilon^p}\\] where: \\[\\begin{aligned} \\boldsymbol{x} = \\left (\\begin{array}{c} x\\\\ y \\end{array}\\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{v} = \\left (\\begin{array}{c} v_x\\\\ v_y \\end{array}\\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{\\sigma} = \\left (\\begin{array}{cc} \\sigma_{xx} &\\sigma_{xy}\\\\ \\sigma_{xy} &\\sigma_{yy} \\end{array}\\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{f}^{ext} = \\left (\\begin{array}{c} f^{ext}_x\\\\ f^{ext}_y \\end{array}\\right) \\end{aligned}\\] \\[\\begin{aligned} \\boldsymbol{f}^{\\sigma} = \\left (\\begin{array}{c} \\sigma_{xx}\\\\ \\sigma_{yy}\\\\ \\sigma_{xy}\\\\ \\sigma_{zz} \\end{array} \\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{\\tilde{\\sigma}} = \\left(\\begin{array}{c} 2\\sigma_{xy}\\dot\\omega_{xy}\\\\ 2\\sigma_{xy}\\dot\\omega_{yx}\\\\ \\sigma_{xx}\\dot\\omega_{yx}+\\sigma_{yy}\\dot\\omega_{xy}\\\\ 0 \\end{array} \\right) = \\left(\\begin{array}{c} 2\\sigma_{xy}\\dot\\omega_{xy}\\\\ -2\\sigma_{xy}\\dot\\omega_{xy}\\\\ (\\sigma_{yy}-\\sigma_{xx})\\dot\\omega_{xy}\\\\ 0 \\end{array} \\right) \\end{aligned}\\] \\[\\begin{aligned} \\boldsymbol{f}^v = \\left (\\begin{array}{cc} D^e_{11}v_x &D^e_{12}v_y\\\\ D^e_{21}v_x &D^e_{22}v_y\\\\ D^e_{33}v_y &D^e_{33}v_x\\\\ D^e_{41}v_x &D^e_{42}v_y \\end{array}\\right)\\end{aligned} , \\begin{aligned} \\boldsymbol{g}^{\\epsilon^p} = \\left(\\begin{array}{c} g^{\\epsilon^p}_{xx}(\\boldsymbol{\\dot \\epsilon}^p)\\\\ g^{\\epsilon^p}_{yy}(\\boldsymbol{\\dot \\epsilon}^p)\\\\ g^{\\epsilon^p}_{xy}(\\boldsymbol{\\dot \\epsilon}^p)\\\\ g^{\\epsilon^p}_{zz}(\\boldsymbol{\\dot \\epsilon}^p) \\end{array} \\right) \\end{aligned} , \\begin{aligned} \\dot{\\boldsymbol{\\epsilon}}^p = \\left(\\begin{array}{c} \\dot \\epsilon^p_{xx}\\\\ \\dot \\epsilon^p_{yy}\\\\ \\dot \\epsilon^p_{xy}\\\\ 0 \\end{array} \\right) \\end{aligned}\\] \\[{\\boldsymbol{f}^{\\dot \\epsilon}} = \\begin{aligned} \\left(\\begin{array}{c} \\dot \\epsilon_{xx}\\\\ \\dot \\epsilon_{yy}\\\\ \\dot \\epsilon_{xy}\\\\ 0 \\end{array} \\right) \\end{aligned} = \\begin{aligned} \\left(\\begin{array}{c} \\frac{\\partial v_x}{\\partial x}\\\\ \\frac{\\partial v_y}{\\partial y}\\\\ \\frac{1}{2}(\\frac{\\partial v_x}{\\partial y}+\\frac{\\partial v_y}{\\partial x})\\\\ 0 \\end{array} \\right) \\end{aligned}\\] \\[\\begin{aligned} \\boldsymbol{D}^e = D^e_{pq} = \\frac{E}{(1+\\nu)(1-2\\nu)} \\left (\\begin{array}{cccc} 1-\\nu &\\nu &0 &\\nu\\\\ \\nu &1-\\nu &0 &\\nu\\\\ 0 &0 &(1-2\\nu)/2 &0\\\\ \\nu &\\nu &0 &1-\\nu\\\\ \\end{array}\\right) \\end{aligned}\\] \\(D^e_{pq}\\) is the elastic constitutive tensor , also the ealstic constitutive matrix reduces in plane strain condition. \\(\\boldsymbol{\\tilde{\\sigma}}\\) is the Jaumann stress-rate , which is adopted to achieve an invariant stress rate with respect to rigid-body rotation for large deformation analysis. \\(\\dot{\\omega}_{\\alpha\\beta}\\) is the spin rate tensor . And \\(\\boldsymbol{g}^{\\epsilon^p}\\) is a vector containing the plastic terms which is the only difference responsible for plastic deformations between the elastoplastic and Perzyna constitutive models. In both models, the plastic terms are functions of the plastic strain rate, which is dependent on the state of stress and material parameters. For the elastoplastic model, \\[\\boldsymbol{g}^{\\epsilon^p} = \\dot{\\lambda}(9K\\sin\\psi\\delta_{ij}+\\frac{G}{\\sqrt{J_2}}\\boldsymbol{s})\\] which is non-zero only when \\(f = \\sqrt{J_2}+\\alpha_{\\varphi}I_1-k_c = 0\\) (and \\({\\rm d}f=0\\) ), according to the Drucker-Prager yield criterion. And for the Perzyna model, \\[\\boldsymbol{g}^{\\epsilon^p} = \\boldsymbol{D}^e\\frac{\\partial \\sqrt{3J_2}}{\\partial \\boldsymbol{\\sigma}}(\\frac{\\sqrt{3J_2}-f_c}{f_c})^N\\] which is non-zero only when \\(\\sqrt{3J_2}>f_c\\) (according to the Von mises yield criterion). QUESTIONS How does \\(\\frac{\\partial\\sqrt{3J_2}}{\\partial\\boldsymbol{\\sigma}}\\) calculated? What number should \\(N\\) choose? Conservation of mass @mit fluids lectures f10 All the governing equations of fluid motion which were derived using control volume concepts can be recast in terms of the substantial derivative. We will employ the following general vector identity: \\[\\nabla\\cdot(a\\boldsymbol{u}) = \\boldsymbol{u}\\cdot\\nabla a + a\\nabla\\cdot\\boldsymbol{u}\\] which is valid for any scalar \\(a\\) and any vector \\(\\boldsymbol{u}\\) . Beginning with the conservation of mass and the constraint that the density within a moving volume of fluid remains constant, an equivalent condition required for incompressible flow is that the divergence of the flow velocity vanishes. As the loss of mass equals to the net outflow: (\u63a7\u5236\u4f53\u5185\u8d28\u91cf\u7684\u51cf\u5c11=\u51c0\u6d41\u51fa\u91cf). So: \\[\\frac{\\partial \\rho}{\\partial t}+\\nabla\\cdot(\\rho\\boldsymbol{v})=0,\\ from\\ \\frac{\\partial\\rho}{\\partial t}=-\\nabla\\cdot\\boldsymbol{J}=0\\ and\\ \\boldsymbol{J}=\\rho\\boldsymbol{v}\\] \\[-\\frac{\\partial m}{\\partial t} = -\\frac{\\partial \\rho}{\\partial t}{\\rm d}x{\\rm d}y{\\rm d}z=[\\frac{\\partial (\\rho v_x)}{\\partial x}+\\frac{\\partial (\\rho v_y)}{\\partial y}+\\frac{\\partial (\\rho v_z)}{\\partial z}]{\\rm d}x{\\rm d}y{\\rm d}z\\] \\[\\frac{\\partial \\rho}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla\\rho+\\rho\\nabla\\cdot\\boldsymbol{v}=0\\] The final form in Lagrangian method of density: (left is the change of density, right is the change of volume) \\[\\frac{{\\rm D}\\rho}{{\\rm D}t}=-\\rho\\nabla\\cdot\\boldsymbol{v}\\] @bui2021 The original form ( \\(\\rho=\\sum_j m_jW_{ij}\\) ) of SPH mass equation operator is not suitable because the density will drop in the boundary of calculating domain, not like astrophysics in which there is an infinite domain. On the other hand, we use \\[\\frac{{\\rm D}\\rho_i}{{\\rm D}t}=\\sum_jm_j(\\boldsymbol{v}_i-\\boldsymbol{v}_j)\\cdot\\nabla_iW_{ij}\\] to solve homogenous problem and use \\[\\frac{{\\rm D}\\rho_i}{{\\rm D}t}=\\rho_i\\sum_jV_j(\\boldsymbol{v}_i-\\boldsymbol{v}_j)\\cdot\\nabla_iW_{ij}\\] to solve non-homogenous problem. Conservation of momentum Cauchy momentum equation is a vector partial differential equation that describes the non-relativistic momentum transport in any continuum. And in convective (or Lagrangian) form is written as: \\[\\frac{{\\rm D}\\boldsymbol{v}}{{\\rm D}t}=\\frac{1}{\\rho}\\nabla\\cdot\\boldsymbol{\\sigma}+\\boldsymbol{f}\\] @bui2021 To exactly conserve momentum, we should use the symmetric form: \\[\\frac{{\\rm D}\\boldsymbol{v}_i}{{\\rm D}t}=\\sum_jm_j(\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2}+\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2})\\cdot\\nabla_iW_{ij}+\\boldsymbol{f}^{ext}_i\\] Standard soil SPH Discretization @chalk2020 Section 3.1 The discrete governing equations of soil motion in the framework of standard SPH are therefore: \\[\\frac{{\\rm D} \\rho_i}{{\\rm D} t} = \\rho_i\\sum_j V_j(\\boldsymbol{v}_i-\\boldsymbol{v}_j)\\cdot\\nabla W_{ij}\\] \\[\\frac{{\\rm D} \\boldsymbol{v}_i}{{\\rm D} t} = \\sum_j m_j(\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2}+\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2})\\cdot\\nabla W_{ij}+\\boldsymbol{f}^{ext}_i\\] \\[\\frac{{\\rm D} \\boldsymbol{f}^{\\sigma}_i}{{\\rm D} t} = \\boldsymbol{\\tilde{\\sigma}}_i+\\sum_j V_j(\\boldsymbol{f}_j^v-\\boldsymbol{f}_i^v)\\cdot\\nabla W_{ij}-\\boldsymbol{g}_i^{\\epsilon^p}\\] In the current work, each SPH particle is assigned the same, constant density for the duration of the simulation. We treat the soil as incompressible and consequently do not update density through this way. The relationship of variables in Drucker-Prager model: Symp-Euler for standard Drucker-Prager soil SPH Known \\(\\Delta x\\) , \\(\\nu\\) , \\(E\\) , \\(D_{pq}^e\\) , \\(\\rho_0\\) , \\(\\boldsymbol{f}^{ext} = \\vec{g}\\) , \\(\\psi=0\\) , and paras for D-P yield criteria \\(c\\) , \\(\\varphi\\) , \\(\\alpha_{\\varphi}\\) and \\(k_c\\) Given \\(\\boldsymbol{x}_t\\) , \\(\\boldsymbol{v}_t\\) , \\(\\boldsymbol{\\sigma}_t\\) at each particle Update boundary Cal compact form \\(\\boldsymbol{f}^{\\sigma}\\) and \\(\\boldsymbol{f}^{v}\\) Cal stress terms \\(\\sigma^H_t\\) , \\(s^{ij}_t\\) Cal gradient of velocity tensor \\(\\nabla\\cdot\\boldsymbol{v}\\) or \\(v_{i,j}\\) Cal strain rate tensor \\(\\dot{\\epsilon}_{ij}\\) , spin rate tensor \\(\\dot{\\omega}_{ij}\\) and Jaumann stress rate vector \\(\\tilde{\\sigma}_{ij}\\) Cal the invariant terms \\(I_1\\) and \\(J_2\\) Cal the consistency para \\(\\dot{\\lambda}\\) Cal the plastic potential vector \\(\\boldsymbol{g}^{\\epsilon^p}\\) Cal \\(\\dot{\\rho}\\) , \\(\\dot{\\boldsymbol{v}}\\) , \\(\\dot{\\boldsymbol{f}^{\\sigma}}\\) Update \\(\\boldsymbol{\\sigma}\\) and do adaptation Update \\(\\rho\\) , \\(\\boldsymbol{v}\\) and \\(\\boldsymbol{x}\\) RK4 for standard Drucker-Prager soil SPH @Chalk2020, Appendix B. The considered governing SPH equations are summarised as: \\[\\frac{{\\rm D} \\boldsymbol{v}_i}{{\\rm D} t} = \\sum_j V_j(\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2}+\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2})\\cdot\\nabla W_{ij}+\\boldsymbol{f}^{ext}_i = F_1(\\boldsymbol{\\sigma}_i)\\] \\[\\frac{{\\rm D} \\boldsymbol{f}^{\\sigma}_i}{{\\rm D} t} = \\boldsymbol{\\tilde{\\sigma}}_i+\\sum_j V_j(\\boldsymbol{f}_j^v-\\boldsymbol{f}_i^v)\\cdot\\nabla W_{ij}-\\boldsymbol{g}_i^{\\epsilon^p} = F_2(\\boldsymbol{v}_i,\\boldsymbol{\\sigma}_i)\\] Using the fourth order Runge-Kutta (RK4) method: \\[\\boldsymbol{v}_i^{t+\\Delta t} = \\boldsymbol{v}_i^t + \\frac{\\Delta t}{6}(F_1(\\boldsymbol{\\sigma}^1_i)+2F_1(\\boldsymbol{\\sigma}^2_i)+2F_1(\\boldsymbol{\\sigma}^3_i)+F_1(\\boldsymbol{\\sigma}^4_i))\\] \\[\\boldsymbol{f}^{\\sigma, t+\\Delta t}_i = \\boldsymbol{f}^{\\sigma, t}_i + \\frac{\\Delta t}{6}(F_2(\\boldsymbol{v}^1_i,\\boldsymbol{\\sigma}^1_i)+2F_2(\\boldsymbol{v}^2_i,\\boldsymbol{\\sigma}^2_i)+2F_2(\\boldsymbol{v}^3_i,\\boldsymbol{\\sigma}^3_i)+F_2(\\boldsymbol{v}^4_i,\\boldsymbol{\\sigma}^4_i))\\] where: \\[\\begin{aligned} \\begin{array}{ll} \\boldsymbol{v}^1_i = \\boldsymbol{v}^t_i &\\boldsymbol{f}^{\\sigma, 1}_i = \\boldsymbol{f}^{\\sigma, t}_i\\\\ \\boldsymbol{v}^2_i = \\boldsymbol{v}^t_i+\\frac{\\Delta t}{2}(F_1(\\boldsymbol{\\sigma}^1_i)) &\\boldsymbol{f}^{\\sigma, 2}_i = \\boldsymbol{f}^{\\sigma, t}_i+\\frac{\\Delta t}{2}(F_2(\\boldsymbol{v}^1_i, \\boldsymbol{\\sigma}^1_i))\\\\ \\boldsymbol{v}^3_i = \\boldsymbol{v}^t_i+\\frac{\\Delta t}{2}(F_1(\\boldsymbol{\\sigma}^2_i)) &\\boldsymbol{f}^{\\sigma, 3}_i = \\boldsymbol{f}^{\\sigma, t}_i+\\frac{\\Delta t}{2}(F_2(\\boldsymbol{v}^2_i, \\boldsymbol{\\sigma}^2_i))\\\\ \\boldsymbol{v}^4_i = \\boldsymbol{v}^t_i+\\Delta t(F_1(\\boldsymbol{\\sigma}^3_i)) &\\boldsymbol{f}^{\\sigma, 4}_i = \\boldsymbol{f}^{\\sigma, t}_i+\\Delta t(F_2(\\boldsymbol{v}^3_i, \\boldsymbol{\\sigma}^3_i)) \\end{array} \\end{aligned}\\] In standard SPH, these eight eqs are spatially resolved at each calculation step by calculating \\(\\boldsymbol{v}_i^{t+\\Delta t}\\) and \\(\\boldsymbol{\\sigma}_i^{t+\\Delta t}\\) at each particle. Key point and aim: update the position, velocity and stress. Known \\(\\Delta x\\) , \\(\\nu\\) , \\(E\\) , \\(D_{pq}^e\\) , \\(\\rho_0\\) , \\(\\boldsymbol{f}^{ext} = \\vec{g}\\) , and paras for D-P yield criteria \\(c\\) , \\(\\varphi\\) , \\(\\alpha_{\\varphi}\\) and \\(k_c\\) . Given \\(\\boldsymbol{x}_i^1\\) , \\(\\boldsymbol{v}_i^1\\) , \\(\\boldsymbol{\\sigma}_i^1\\) . Step 1: calculate terms \\(\\boldsymbol{f}^{\\sigma}\\) and \\(\\boldsymbol{f}^v\\) . Step 2: update boundary conditions and adapt the stress. Step 3: calculate the gradient terms \\((\\nabla\\cdot\\boldsymbol{f}^{\\sigma})_i\\) and \\((\\nabla\\cdot\\boldsymbol{f}^v)_i\\) . Step 4: calculate the additional terms for the momentum equation, mainly the body force \\(\\boldsymbol{f}^{ext}_i\\) in which gravity is the only one considered. Also if included, the artificial viscosity is calculated here. Step 5: calculate the additional terms for the constitutive equation, mainly the plastic strain function \\(\\boldsymbol{g}^{\\epsilon^p}_i\\) . When calculating each particle, the stress state is checked to see if the yield criterion has been met. If the stress state lies within the elastic range ( \\(f<0\\) or \\(f=0,\\ {\\rm d}f>0\\) ), then \\(\\boldsymbol{g}^{\\epsilon^p}_i = 0\\) . Otherwise ( \\(f=0,\\ {\\rm d}f=0\\) ), the plastic term is calculated and \\(\\boldsymbol{g}^{\\epsilon^p}_i\\) is non-zero. The plastic term is a function of stress \\(\\boldsymbol{\\sigma}\\) and velocity gradients \\(\\nabla \\boldsymbol{v}\\) . For large deformation problems, the Jaumann stress rate \\(\\tilde{\\boldsymbol{\\sigma}}_i\\) is also updated. This involves gradients of the velocity \\(\\nabla \\boldsymbol{v}\\) . Step 6: compute \\(F_1\\) and \\(F_2\\) on particles. Step 7: calculate \\(\\boldsymbol{v}_i^2\\) and \\(\\boldsymbol{\\sigma}_i^2\\) . Step 8: if necessary, the boundary conditions and stress state are again updated. Step 9: repeat Steps 1-8 to obtain \\(\\boldsymbol{u}_i^3\\) , \\(\\boldsymbol{\\sigma}_i^3\\) , \\(\\boldsymbol{v}_i^4\\) and \\(\\boldsymbol{\\sigma}_i^4\\) . Then update the velocity \\(\\boldsymbol{v}_i^{t+\\Delta t}\\) and the stress \\(\\boldsymbol{\\sigma}_i^{t+\\Delta t}\\) at the subsequent time step, also the positions \\(\\boldsymbol{x}_i^{t+\\Delta t}\\) of the particles. As for the calculation of plastic potential function item: As for the implementation of RK4:","title":"SPH for soil"},{"location":"soil/#sph-for-soil","text":"","title":"SPH for soil"},{"location":"soil/#constitutive-model-of-soil","text":"Constitutive model is a core component of a computational framework used to describe how a material behaves under external loads. A constitutive equation is required to relate the soil stresses to the strain rates. In the application of CFD approach to model geomaterials using SPH, the materials are considered to either be fluid-like materials (i.e. liquefied materials) or have reached its critical state. However, the key drawback of this type of constitutive model is that it cannot describe complex responses of geomaterials, including the hardening or/and softening processes before reaching the critical state of soils. Advanced constitutive models were built on the basis of continuum plasticity theory.","title":"Constitutive model of soil"},{"location":"soil/#a-simple-elastic-perfectly-plastic-model-for-soil","text":"@bui2021 3.2.1.1. Standard CFD approach for \\(c-\\varphi\\) soils. The shear stresses increase linearly with the incresing shear strain and thus cannot capture the plastic response. A simple approach is to restrict the development of shear stresses when the materials enter the plastic flow regime without actually solving the plastic deformation. (\u5373\u4e0d\u8ba1\u7b97\u5851\u6027\u53d8\u5f62\uff0c\u5f53\u6750\u6599\u8fdb\u5165\u5851\u6027\u6d41\u52a8\u72b6\u6001\u65f6\uff0c\u76f4\u63a5\u6309\u7167M-C\u5f3a\u5ea6\u51c6\u5219\u7ea6\u675f\u526a\u5e94\u529b) The stress tensor is decomposed into the isotropic pressure \\(p\\) and deviatoric stress \\(\\boldsymbol{s}\\) : \\[\\boldsymbol{\\sigma}=p\\boldsymbol{I}+\\boldsymbol{s}\\] \\(p\\) is computed using an equation of state (EOS) which is often formulated as a function of density change and sound speed. For geomechanics applications, following the general Hooke's law: \\[p=K\\frac{\\Delta V}{V_0}=K(\\frac{\\rho}{\\rho_0}-1)\\] On the other hand, the deviatoric shear stress can be estimated using the general Hooke's law for elastic materials : \\[\\dot{\\boldsymbol{s}}=2G(\\dot{\\boldsymbol{\\epsilon}}-\\frac{1}{3}\\boldsymbol{I}\\dot{\\epsilon}_v)\\] The plastic regime for general soils can be determinded by the Mohr-Coulomb failure criterion: \\[\\tau_f=c+p\\tan{\\varphi}\\] where \\(\\tau_f=\\sqrt{\\frac{3}{2}\\boldsymbol{s}:\\boldsymbol{s}}\\) is the maximum shear stress at failure. When the soil enters its plastic flow regime, the shear stress components are scaled back to the yield surface.","title":"A simple elastic-perfectly plastic model for soil"},{"location":"soil/#mui-rheological-constitutive-model","text":"@bui2021 3.2.1.2. and yang2021 2.2 The \\(\\mu(I)\\) -rheological model is one of the most commonly used and widely validated rheological models, developed to capture the rate-dependent and inertial effect of granular materials in the dense flow regime. It was derived based on the Bingham constitutive relation for non-Newtonian fluids. It assumes the materials behave as a rigid body or stiff elastic response before yielding and then quickly reaching their plastic flow behaviour. (\u5047\u8bbe\u6750\u6599\u5728\u5c48\u670d\u524d\u8868\u73b0\u4e3a\u521a\u4f53\u6216\u521a\u6027\u5f39\u6027\u54cd\u5e94\uff1f\u7136\u540e\u8fc5\u901f\u8fbe\u5230\u5176\u5851\u6027\u6d41\u52a8\u72b6\u6001\u5373\u5c48\u670d\u540e\u7684\u4e34\u754c\u72b6\u6001) It separates the stress tensor into an isotropic pressure and viscous shear stress tensor, and the viscous shear stress is then defined as a function of total strain-rate: \\[\\boldsymbol{\\sigma}=-p\\boldsymbol{I}+\\boldsymbol{\\tau}\\] \\[\\boldsymbol{\\tau}=2\\eta\\dot{\\boldsymbol{\\epsilon}},\\ \\eta=\\frac{\\mu(I)p}{\\sqrt{2(\\dot{\\boldsymbol{\\epsilon}}:\\dot{\\boldsymbol{\\epsilon}})}},\\ \\mu(I)=\\mu_s+\\frac{\\mu_2-\\mu_s}{I_0/I+1}\\] where \\(\\eta\\) is an effective viscosity, when \\(\\dot{\\boldsymbol{\\epsilon}}\\rightarrow0\\) , it diverges to infinity and this ensures the material behaviour is rigid or very stiff when the strain rate is very small or at the static condition and thus guaranteeing the existence of a field criterion; \\(\\dot{\\boldsymbol{\\epsilon}}\\) is the total strain-rate tensor; \\(\\mu\\) is a frictional function dependent on the inertial number \\(I=d_s\\sqrt{2(\\dot{\\boldsymbol{\\epsilon}}:\\dot{\\boldsymbol{\\epsilon}})}/\\sqrt{p/\\rho_s}\\) with \\(d_s\\) being the grain diameter, \\(\\rho_s\\) being the solid density; \\(\\mu_2\\) and \\(I_0\\) are both materials constants with \\(\\mu_2\\) being the critical friction angle at very high \\(I\\) ; and \\(\\mu_s\\) is the sratic friction coefficient, corresponding to the state of no plastic flow. Under the condition of the strain rate tensor in the limit of 0 ( \\(I\\rightarrow0\\) ), the second component of \\(\\mu(I)\\) will approach 0. This suggests that, under static condition, \\(\\mu(I)=\\mu_s\\) , which defines a yielding threshold above which yielding occurs. Accordingly, the following yield criterion, which takes the form of the Drucker-Prager-like criterion, can be defined: \\[|\\boldsymbol{\\tau}|\\leq\\mu_sp,\\ |\\boldsymbol{\\tau}|=\\sqrt{0.5(\\boldsymbol{\\tau}:\\boldsymbol{\\tau})}\\] The isotropic pressure can be defined alternltively, where the second one is commonly used in the SPH context to model quasi-compressible fluid: \\[p=K\\frac{\\Delta V}{V_0}=K(\\frac{\\rho}{\\rho_0}-1)\\ or\\ p=c^2(\\rho-\\rho_0)\\] where \\(c\\) is the speed of sound, which is assumed to be \\(10 v_{max}\\) (for Yang2021, it is \\(35m/s\\) and for Bui2021, it is \\(600m/s\\) ). Finally, it is noted that when incorporating this model, to avoid unphysical behaviour, the shear component of the stress tensor should be set to 0 for negative pressure value. In addition, the initial strain rate tensor should be set close to 0 (e.g. \\(10^{-7}\\) ) as 0 strain rates can result in mathematically undefined behaviour. To incorporate the shear strength of granular materials, here incorporates the Mohr-Coulomb yield criteria, which allows the yielding shear stress to be described as a function of pressure, as well as easily obtained material properties: \\[\\tau_y=c+p\\tan\\varphi\\] where \\(c\\) is cohesion and \\(\\varphi\\) is the internal angle of friction. The 1D modified Bingham shear stress: \\[\\tau=\\eta_0\\dot{\\boldsymbol{\\epsilon}}+c+p\\tan\\varphi\\] using an equivalent fluid viscosity, \\(\\eta\\) , for use in Navier-Stokes solvers: \\[\\eta=\\eta_0+\\frac{c+p\\tan\\varphi}{\\dot{\\boldsymbol{\\epsilon}}}\\] As for 3D simulation, the generalised form of the modified Bingham shear stress: \\[\\boldsymbol{\\tau}_i=\\eta_0\\dot{\\boldsymbol{\\epsilon}}_i+(c+p\\tan\\varphi)\\frac{\\dot{\\boldsymbol{\\epsilon}}_i}{\\sqrt{\\frac{1}{2}\\dot{\\boldsymbol{\\epsilon}}_i:\\dot{\\boldsymbol{\\epsilon}}_i}}\\] The above modified Bingham model can be thought of as a precursor to the \\(\\mu(I)\\) model, where the \\(\\mu(I)\\) model takes the dynamic viscosity \\(\\eta_0\\) and the cohesion \\(c\\) as 0, and also exchanges \\(\\tan\\varphi\\) for a scalar friction value. NOTE : the \\(\\mu(I)\\) model need the difference of density to generate pressure, so it is wrong to keep a constant density.","title":"\\(\\mu(I)\\)-rheological constitutive model"},{"location":"soil/#elastoplastic-model","text":"@bui2021 3.2.2. This model was built on basis of continuum plasticity theory, in which a single mathematical relationship that relates the stress-increment to the strain-increment was established for a homogenous representative volume element which is assumed to remain homogenous. A yield surface and a plastic potential function \\(g\\) (or dilatancy rule) are then used to control the hardening or/and softening processes commonly observed in the materials. Elastic and plastic material behaviour are distinguished according to a specified yield function \\(f\\) . The fundamental assumption of plasticity is that the total soil strain rate \\(\\boldsymbol{\\dot\\epsilon}\\) can be divided into an elastic and a plastic component: \\[\\boldsymbol{\\dot\\epsilon} = \\boldsymbol{\\dot\\epsilon}^e+\\boldsymbol{\\dot\\epsilon}^p\\] The stress increment is then calculated from the generalised Hooke's Law: \\[\\dot{\\boldsymbol{\\sigma}}=\\boldsymbol{D}^e:\\dot{\\boldsymbol{\\epsilon}}^e=\\boldsymbol{D}^{ep}:\\dot{\\boldsymbol{\\epsilon}}\\] We define the elastic strains according to the generalised Hooke's Law: \\[\\dot{\\boldsymbol{\\epsilon}}^e = \\frac{\\dot{\\boldsymbol{s}}}{2G}+\\frac{1-2\\nu}{3E}\\dot{\\sigma}_{mm}\\boldsymbol{I},\\ \\dot{\\sigma}_{mm}=\\dot{\\sigma}_{xx}+\\dot{\\sigma}_{yy}+\\dot{\\sigma}_{zz}\\] And in plasticity-based models, the plastic srtain rate is defined via the plastic flow rule: \\[\\dot{\\boldsymbol{\\epsilon}}^p=\\dot{\\lambda}\\frac{\\partial g}{\\partial \\boldsymbol{\\sigma}}\\] where \\(\\dot{\\lambda}\\) is the so-called consistency parameter , a positive plastic-multiplier, and \\(g\\) is the plastic potential function . The plastic potential function describes the direction of plastic flow as a function of the stress tensor. For \\(g=f\\) , the flow rule is said to be associated. otherwise, it is non-associated. And in soil mechanics, the soil pressure \\(p\\) is obtained directly from the equation for hydrostatic pressure : \\[p = -\\frac{1}{3}(\\sigma_{xx}+\\sigma_{yy}+\\sigma_{zz})\\] QUESTIONS the hydrostatic pressure \\(p\\) , is positive or negtive? \\(\\boldsymbol{s}\\) is only correct when \\(p\\) is positive as Chalk2020's Appendix A, but in the main text of Chalk2020, \\(p\\) is negtive. STRETCH for positive and COMPRESS for negative? Answer : Generally it's negtive. When it is positive, the meaning is the average normal stress \\(\\sigma_m = -p\\) .","title":"Elastoplastic model"},{"location":"soil/#yield-criteria","text":"For Drucker-Prager yield criteria: \\[f=\\sqrt{J_2}+\\alpha_{\\varphi}I_1-k_c=0\\] where the functions of the Coulomb material constants - the soil internal friction \\(\\varphi\\) and cohesion \\(c\\) : \\[\\alpha_{\\varphi}=\\frac{\\tan\\varphi}{\\sqrt{9+12\\tan^2\\varphi}}, k_c=\\frac{3c}{\\sqrt{9+12\\tan^2\\varphi}}\\] And for the elastoplastic constitutive equation of Drucker-Prager and non-associated flow rule \\[g=\\sqrt{J_2}+3I_1\\sin\\psi\\] where \\(\\psi\\) is dilatancy angle and in Chalk's thesis \\(\\psi=0\\) . And the Von Mises criterion is: \\[f = \\sqrt{3J_2}-f_c\\] The Von Mises and D-P yield criteria are illustrated in two dimensions: The increment of the yield function after plastic loading or unloading: \\[{\\rm d}f=\\frac{\\partial f}{\\partial \\boldsymbol{\\sigma}} {\\rm d}\\boldsymbol{\\sigma}\\] The stress state is not allowed to exceed the yield surface, and the yield function increment cannot be greater than 0. \\({\\rm d}f=0\\) ensures that the stress state remains on the yield surface during plastic loading. QUESTIONS How to calculate \\({\\rm d}f\\) ? ANSWER : \\({\\rm d}f = f^*-f\\) in advection.","title":"Yield criteria"},{"location":"soil/#the-elastoplastic-constitutive-equation","text":"After rearranging: \\[\\frac{\\partial \\sigma_{ij}}{\\partial t}=2G\\dot{e}_{ij}+K\\dot{\\epsilon}_{mm}\\delta_{ij}-\\dot{\\lambda}((K-\\frac{2}{3}G)\\frac{\\partial g}{\\partial \\sigma_{kl}}\\delta_{kl}\\delta_{ij}+2G\\frac{\\partial g}{\\partial \\sigma_{ij}})\\] The first two terms on the right hand side describe the elastic strain, while the latter term describes the plastic deformations (which is non-zero when plastic flow occurs). Upon substitution of plastic potential function and the Drucker-Prager yield function into the equation above: \\[\\frac{\\partial \\sigma_{ij}}{\\partial t}=2G\\dot{e}_{ij}+K\\dot{\\epsilon}_{mm}\\delta_{ij}-\\dot{\\lambda}(9K\\sin\\psi\\delta_{ij}+\\frac{G}{\\sqrt{J_2}}s_{ij}) \\] where \\[\\dot{\\lambda}=\\frac{3\\alpha_{\\varphi}K\\dot{\\epsilon}_{mm}+(G/\\sqrt{J_2})s_{ij}\\dot{\\epsilon}_{ij}}{27\\alpha_{\\varphi}K\\sin\\psi+G} \\]","title":"The elastoplastic constitutive equation"},{"location":"soil/#stress-adaptation","text":"@Bui2008 Section 3.3.1 and Chalk2019 Section 4.3.1 Consider both a Von Mises and a Drucker-Prager yield criterion to distinguish between elastic and plastic material behaviour. In the elastoplastic model, the stress state is not allowed to exceed the yield surface and we should apply a stress adaptation to particles, after every calculation step. The stress must be checked at every step and adapted if it does not lie within a valid range. First, the stress state must be adapted if it moves outside the apex of the yield surface, which is konwn as tension cracking , in the movement of the stress state at point E to point F. Tension cracking occurss when: \\(-\\alpha_{\\varphi}I_1+k_c<0\\) or \\(f\\ge\\sqrt{J_2}\\) . And in such circumstances, the hydrostatic stress \\(I_1\\) must be shifted back to the apex of the yield surface by adapting the normal stress components: \\[\\hat{\\boldsymbol{\\sigma}} = \\boldsymbol{\\sigma}-\\frac{1}{3}(I_1-\\frac{k_c}{\\alpha_{\\varphi}})\\] The second corrective stress treatment must be performed when the stress state exceeds the yield surface during plastic loading, as shown by the path A to B. For the D-P yield criterion, this occurs when: \\(-\\alpha_{\\varphi}I_1+k_c<\\sqrt{J_2}\\) or \\(0<f<\\sqrt{J_2}\\) . And the stress state must be scaleld back appropriately. For this, a scaling factor \\(r_{\\sigma}\\) is introduced: \\(r_{\\sigma} = (-\\alpha_{\\varphi}I_1+k_c) / \\sqrt{J_2}\\) . The deviatoric shear stress is then reduced via this scaling factor for all components of the stress tensor: \\[\\hat{\\sigma}_{ii} = r_{\\sigma}s_{ii}+\\frac{1}{3}I_1\\] \\[\\hat{\\sigma}_{ij} = r_{\\sigma}s_{ij}\\] The procedure of applying these two equations is referred to as the stress-scaling back procedure, or stress modification. In the SPH implementation of the elastoplastic model, the two corrective treatments described above are applied to the particles that have a stress state outside of the valid range.","title":"Stress adaptation"},{"location":"soil/#viscoplastic-perzyna-model","text":"The consistency parameter \\(\\dot{\\lambda}\\) is defined as: \\[\\dot{\\lambda}=\\gamma\\langle\\phi(F)\\rangle\\] where \\(\\gamma\\) is a fluidity parameter (acts as the reciprocal of viscosity) and \\(\\phi(F)\\) is a yield-type function. The \\(\\langle...\\rangle\\) symbol represents the Macaulay brackets: \\[\\langle\\phi\\rangle=\\begin{cases} \\phi,&\\phi\\ge0\\\\ 0,&\\phi<0\\\\ \\end{cases}\\] The function \\(\\phi(F)\\) is therefore defined as: \\[\\phi(F)=(\\frac{F-F_0}{F_0})^N\\] where \\(N\\) is a model parameter, \\(F\\) is a function of the stress state (related to the yield function), and \\(F_0\\) defines a critical stress value for plastic strains. Plastic flow occurs then \\(F>F_0\\) (the function \\(F\\) exceeds the critical value \\(F_0\\) ) and plastic strains are non-zero. ... ... In summary, the Perzyna constitutive model is defined as: \\[\\frac{\\partial \\sigma_{ij}}{\\partial t}=D^e_{ijkl}(\\dot{\\epsilon}_{kl}-\\gamma\\frac{\\partial g}{\\partial\\sigma_{kl}}(\\frac{F-F_0}{F_0})^N)\\] The implementation of the Von Mises yield criterion, with an associated flow rule ( \\(f=g\\) ): \\[F=\\sqrt{3J_2},\\ F_0=f_c\\]","title":"Viscoplastic Perzyna model"},{"location":"soil/#a-generalised-system-of-equations","text":"The general elastoplastic and viscoplastic Perzyna constitutive equations can be written in the following compact form: \\[\\frac{\\partial\\sigma_{ij}}{\\partial t}=D^e_{ijkl}\\dot{\\epsilon}_{kl}-g_{ij}^{\\epsilon^p}\\] where \\(g_{ij}^{\\epsilon^p}\\) is a function of the plastic strain, depending on the choice of constitutive model: \\[g_{ij}^{\\epsilon^p}=\\dot{\\lambda}((K-\\frac{2}{3}G)\\frac{\\partial g}{\\partial \\sigma_{kl}}\\delta_{kl}\\delta_{ij}+2G\\frac{\\partial g}{\\partial \\sigma_{ij}})\\] or \\[g_{ij}^{\\epsilon^p}=D^e_{ijkl}\\gamma\\frac{\\partial g}{\\partial\\sigma_{kl}}(\\frac{F-F_0}{F_0})^N\\] And for large deformation problems, the rate of stress must be adapted so that it is invariant with respect to large body rotations. The standard stress rate is replaced with the Jaumann stress rate: \\[\\dot{\\tilde{\\sigma}}_{ij}=\\dot{\\sigma}_{ij}-\\sigma_{im}\\dot{\\omega}_{jm}-\\sigma_{mj}\\dot{\\omega}_{im}\\] or \\[\\dot{\\tilde{\\boldsymbol{\\sigma}}}=\\dot{\\boldsymbol{\\sigma}}-\\boldsymbol{\\omega}\\boldsymbol{\\sigma}-\\boldsymbol{\\sigma}\\boldsymbol{\\omega}^T \\] Then the equation becomes: \\[\\frac{\\partial\\sigma_{ij}}{\\partial t}=\\sigma_{im}\\dot{\\omega}_{jm}-\\sigma_{mj}\\dot{\\omega}_{im}+D^e_{ijkl}\\dot{\\epsilon}_{kl}-g_{ij}^{\\epsilon^p}\\]","title":"A generalised system of equations"},{"location":"soil/#governing-equations","text":"Conservation of mass: \\[\\frac{{\\rm D} \\rho}{{\\rm D} t}=-\\rho \\nabla\\cdot\\boldsymbol{v}\\] Conservation of momentum: \\[\\frac{{\\rm D} \\boldsymbol{v}}{{\\rm D} t}=\\frac{1}{\\rho} \\nabla\\cdot\\boldsymbol{\\sigma}+\\boldsymbol{f}^{ext}\\] Constitutive equation (in compact form): \\[\\frac{{\\rm D} \\boldsymbol{f}^{\\sigma}}{{\\rm D} t}=\\boldsymbol{\\tilde{\\sigma}} +\\nabla\\cdot\\boldsymbol{f}^v-\\boldsymbol{g}^{\\epsilon^p}\\] where: \\[\\begin{aligned} \\boldsymbol{x} = \\left (\\begin{array}{c} x\\\\ y \\end{array}\\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{v} = \\left (\\begin{array}{c} v_x\\\\ v_y \\end{array}\\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{\\sigma} = \\left (\\begin{array}{cc} \\sigma_{xx} &\\sigma_{xy}\\\\ \\sigma_{xy} &\\sigma_{yy} \\end{array}\\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{f}^{ext} = \\left (\\begin{array}{c} f^{ext}_x\\\\ f^{ext}_y \\end{array}\\right) \\end{aligned}\\] \\[\\begin{aligned} \\boldsymbol{f}^{\\sigma} = \\left (\\begin{array}{c} \\sigma_{xx}\\\\ \\sigma_{yy}\\\\ \\sigma_{xy}\\\\ \\sigma_{zz} \\end{array} \\right) \\end{aligned} , \\begin{aligned} \\boldsymbol{\\tilde{\\sigma}} = \\left(\\begin{array}{c} 2\\sigma_{xy}\\dot\\omega_{xy}\\\\ 2\\sigma_{xy}\\dot\\omega_{yx}\\\\ \\sigma_{xx}\\dot\\omega_{yx}+\\sigma_{yy}\\dot\\omega_{xy}\\\\ 0 \\end{array} \\right) = \\left(\\begin{array}{c} 2\\sigma_{xy}\\dot\\omega_{xy}\\\\ -2\\sigma_{xy}\\dot\\omega_{xy}\\\\ (\\sigma_{yy}-\\sigma_{xx})\\dot\\omega_{xy}\\\\ 0 \\end{array} \\right) \\end{aligned}\\] \\[\\begin{aligned} \\boldsymbol{f}^v = \\left (\\begin{array}{cc} D^e_{11}v_x &D^e_{12}v_y\\\\ D^e_{21}v_x &D^e_{22}v_y\\\\ D^e_{33}v_y &D^e_{33}v_x\\\\ D^e_{41}v_x &D^e_{42}v_y \\end{array}\\right)\\end{aligned} , \\begin{aligned} \\boldsymbol{g}^{\\epsilon^p} = \\left(\\begin{array}{c} g^{\\epsilon^p}_{xx}(\\boldsymbol{\\dot \\epsilon}^p)\\\\ g^{\\epsilon^p}_{yy}(\\boldsymbol{\\dot \\epsilon}^p)\\\\ g^{\\epsilon^p}_{xy}(\\boldsymbol{\\dot \\epsilon}^p)\\\\ g^{\\epsilon^p}_{zz}(\\boldsymbol{\\dot \\epsilon}^p) \\end{array} \\right) \\end{aligned} , \\begin{aligned} \\dot{\\boldsymbol{\\epsilon}}^p = \\left(\\begin{array}{c} \\dot \\epsilon^p_{xx}\\\\ \\dot \\epsilon^p_{yy}\\\\ \\dot \\epsilon^p_{xy}\\\\ 0 \\end{array} \\right) \\end{aligned}\\] \\[{\\boldsymbol{f}^{\\dot \\epsilon}} = \\begin{aligned} \\left(\\begin{array}{c} \\dot \\epsilon_{xx}\\\\ \\dot \\epsilon_{yy}\\\\ \\dot \\epsilon_{xy}\\\\ 0 \\end{array} \\right) \\end{aligned} = \\begin{aligned} \\left(\\begin{array}{c} \\frac{\\partial v_x}{\\partial x}\\\\ \\frac{\\partial v_y}{\\partial y}\\\\ \\frac{1}{2}(\\frac{\\partial v_x}{\\partial y}+\\frac{\\partial v_y}{\\partial x})\\\\ 0 \\end{array} \\right) \\end{aligned}\\] \\[\\begin{aligned} \\boldsymbol{D}^e = D^e_{pq} = \\frac{E}{(1+\\nu)(1-2\\nu)} \\left (\\begin{array}{cccc} 1-\\nu &\\nu &0 &\\nu\\\\ \\nu &1-\\nu &0 &\\nu\\\\ 0 &0 &(1-2\\nu)/2 &0\\\\ \\nu &\\nu &0 &1-\\nu\\\\ \\end{array}\\right) \\end{aligned}\\] \\(D^e_{pq}\\) is the elastic constitutive tensor , also the ealstic constitutive matrix reduces in plane strain condition. \\(\\boldsymbol{\\tilde{\\sigma}}\\) is the Jaumann stress-rate , which is adopted to achieve an invariant stress rate with respect to rigid-body rotation for large deformation analysis. \\(\\dot{\\omega}_{\\alpha\\beta}\\) is the spin rate tensor . And \\(\\boldsymbol{g}^{\\epsilon^p}\\) is a vector containing the plastic terms which is the only difference responsible for plastic deformations between the elastoplastic and Perzyna constitutive models. In both models, the plastic terms are functions of the plastic strain rate, which is dependent on the state of stress and material parameters. For the elastoplastic model, \\[\\boldsymbol{g}^{\\epsilon^p} = \\dot{\\lambda}(9K\\sin\\psi\\delta_{ij}+\\frac{G}{\\sqrt{J_2}}\\boldsymbol{s})\\] which is non-zero only when \\(f = \\sqrt{J_2}+\\alpha_{\\varphi}I_1-k_c = 0\\) (and \\({\\rm d}f=0\\) ), according to the Drucker-Prager yield criterion. And for the Perzyna model, \\[\\boldsymbol{g}^{\\epsilon^p} = \\boldsymbol{D}^e\\frac{\\partial \\sqrt{3J_2}}{\\partial \\boldsymbol{\\sigma}}(\\frac{\\sqrt{3J_2}-f_c}{f_c})^N\\] which is non-zero only when \\(\\sqrt{3J_2}>f_c\\) (according to the Von mises yield criterion). QUESTIONS How does \\(\\frac{\\partial\\sqrt{3J_2}}{\\partial\\boldsymbol{\\sigma}}\\) calculated? What number should \\(N\\) choose?","title":"Governing equations"},{"location":"soil/#conservation-of-mass","text":"@mit fluids lectures f10 All the governing equations of fluid motion which were derived using control volume concepts can be recast in terms of the substantial derivative. We will employ the following general vector identity: \\[\\nabla\\cdot(a\\boldsymbol{u}) = \\boldsymbol{u}\\cdot\\nabla a + a\\nabla\\cdot\\boldsymbol{u}\\] which is valid for any scalar \\(a\\) and any vector \\(\\boldsymbol{u}\\) . Beginning with the conservation of mass and the constraint that the density within a moving volume of fluid remains constant, an equivalent condition required for incompressible flow is that the divergence of the flow velocity vanishes. As the loss of mass equals to the net outflow: (\u63a7\u5236\u4f53\u5185\u8d28\u91cf\u7684\u51cf\u5c11=\u51c0\u6d41\u51fa\u91cf). So: \\[\\frac{\\partial \\rho}{\\partial t}+\\nabla\\cdot(\\rho\\boldsymbol{v})=0,\\ from\\ \\frac{\\partial\\rho}{\\partial t}=-\\nabla\\cdot\\boldsymbol{J}=0\\ and\\ \\boldsymbol{J}=\\rho\\boldsymbol{v}\\] \\[-\\frac{\\partial m}{\\partial t} = -\\frac{\\partial \\rho}{\\partial t}{\\rm d}x{\\rm d}y{\\rm d}z=[\\frac{\\partial (\\rho v_x)}{\\partial x}+\\frac{\\partial (\\rho v_y)}{\\partial y}+\\frac{\\partial (\\rho v_z)}{\\partial z}]{\\rm d}x{\\rm d}y{\\rm d}z\\] \\[\\frac{\\partial \\rho}{\\partial t}+\\boldsymbol{v}\\cdot\\nabla\\rho+\\rho\\nabla\\cdot\\boldsymbol{v}=0\\] The final form in Lagrangian method of density: (left is the change of density, right is the change of volume) \\[\\frac{{\\rm D}\\rho}{{\\rm D}t}=-\\rho\\nabla\\cdot\\boldsymbol{v}\\] @bui2021 The original form ( \\(\\rho=\\sum_j m_jW_{ij}\\) ) of SPH mass equation operator is not suitable because the density will drop in the boundary of calculating domain, not like astrophysics in which there is an infinite domain. On the other hand, we use \\[\\frac{{\\rm D}\\rho_i}{{\\rm D}t}=\\sum_jm_j(\\boldsymbol{v}_i-\\boldsymbol{v}_j)\\cdot\\nabla_iW_{ij}\\] to solve homogenous problem and use \\[\\frac{{\\rm D}\\rho_i}{{\\rm D}t}=\\rho_i\\sum_jV_j(\\boldsymbol{v}_i-\\boldsymbol{v}_j)\\cdot\\nabla_iW_{ij}\\] to solve non-homogenous problem.","title":"Conservation of mass"},{"location":"soil/#conservation-of-momentum","text":"Cauchy momentum equation is a vector partial differential equation that describes the non-relativistic momentum transport in any continuum. And in convective (or Lagrangian) form is written as: \\[\\frac{{\\rm D}\\boldsymbol{v}}{{\\rm D}t}=\\frac{1}{\\rho}\\nabla\\cdot\\boldsymbol{\\sigma}+\\boldsymbol{f}\\] @bui2021 To exactly conserve momentum, we should use the symmetric form: \\[\\frac{{\\rm D}\\boldsymbol{v}_i}{{\\rm D}t}=\\sum_jm_j(\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2}+\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2})\\cdot\\nabla_iW_{ij}+\\boldsymbol{f}^{ext}_i\\]","title":"Conservation of momentum"},{"location":"soil/#standard-soil-sph","text":"","title":"Standard soil SPH"},{"location":"soil/#discretization","text":"@chalk2020 Section 3.1 The discrete governing equations of soil motion in the framework of standard SPH are therefore: \\[\\frac{{\\rm D} \\rho_i}{{\\rm D} t} = \\rho_i\\sum_j V_j(\\boldsymbol{v}_i-\\boldsymbol{v}_j)\\cdot\\nabla W_{ij}\\] \\[\\frac{{\\rm D} \\boldsymbol{v}_i}{{\\rm D} t} = \\sum_j m_j(\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2}+\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2})\\cdot\\nabla W_{ij}+\\boldsymbol{f}^{ext}_i\\] \\[\\frac{{\\rm D} \\boldsymbol{f}^{\\sigma}_i}{{\\rm D} t} = \\boldsymbol{\\tilde{\\sigma}}_i+\\sum_j V_j(\\boldsymbol{f}_j^v-\\boldsymbol{f}_i^v)\\cdot\\nabla W_{ij}-\\boldsymbol{g}_i^{\\epsilon^p}\\] In the current work, each SPH particle is assigned the same, constant density for the duration of the simulation. We treat the soil as incompressible and consequently do not update density through this way. The relationship of variables in Drucker-Prager model:","title":"Discretization"},{"location":"soil/#symp-euler-for-standard-drucker-prager-soil-sph","text":"Known \\(\\Delta x\\) , \\(\\nu\\) , \\(E\\) , \\(D_{pq}^e\\) , \\(\\rho_0\\) , \\(\\boldsymbol{f}^{ext} = \\vec{g}\\) , \\(\\psi=0\\) , and paras for D-P yield criteria \\(c\\) , \\(\\varphi\\) , \\(\\alpha_{\\varphi}\\) and \\(k_c\\) Given \\(\\boldsymbol{x}_t\\) , \\(\\boldsymbol{v}_t\\) , \\(\\boldsymbol{\\sigma}_t\\) at each particle Update boundary Cal compact form \\(\\boldsymbol{f}^{\\sigma}\\) and \\(\\boldsymbol{f}^{v}\\) Cal stress terms \\(\\sigma^H_t\\) , \\(s^{ij}_t\\) Cal gradient of velocity tensor \\(\\nabla\\cdot\\boldsymbol{v}\\) or \\(v_{i,j}\\) Cal strain rate tensor \\(\\dot{\\epsilon}_{ij}\\) , spin rate tensor \\(\\dot{\\omega}_{ij}\\) and Jaumann stress rate vector \\(\\tilde{\\sigma}_{ij}\\) Cal the invariant terms \\(I_1\\) and \\(J_2\\) Cal the consistency para \\(\\dot{\\lambda}\\) Cal the plastic potential vector \\(\\boldsymbol{g}^{\\epsilon^p}\\) Cal \\(\\dot{\\rho}\\) , \\(\\dot{\\boldsymbol{v}}\\) , \\(\\dot{\\boldsymbol{f}^{\\sigma}}\\) Update \\(\\boldsymbol{\\sigma}\\) and do adaptation Update \\(\\rho\\) , \\(\\boldsymbol{v}\\) and \\(\\boldsymbol{x}\\)","title":"Symp-Euler for standard Drucker-Prager soil SPH"},{"location":"soil/#rk4-for-standard-drucker-prager-soil-sph","text":"@Chalk2020, Appendix B. The considered governing SPH equations are summarised as: \\[\\frac{{\\rm D} \\boldsymbol{v}_i}{{\\rm D} t} = \\sum_j V_j(\\frac{\\boldsymbol{\\sigma}_i}{\\rho_i^2}+\\frac{\\boldsymbol{\\sigma}_j}{\\rho_j^2})\\cdot\\nabla W_{ij}+\\boldsymbol{f}^{ext}_i = F_1(\\boldsymbol{\\sigma}_i)\\] \\[\\frac{{\\rm D} \\boldsymbol{f}^{\\sigma}_i}{{\\rm D} t} = \\boldsymbol{\\tilde{\\sigma}}_i+\\sum_j V_j(\\boldsymbol{f}_j^v-\\boldsymbol{f}_i^v)\\cdot\\nabla W_{ij}-\\boldsymbol{g}_i^{\\epsilon^p} = F_2(\\boldsymbol{v}_i,\\boldsymbol{\\sigma}_i)\\] Using the fourth order Runge-Kutta (RK4) method: \\[\\boldsymbol{v}_i^{t+\\Delta t} = \\boldsymbol{v}_i^t + \\frac{\\Delta t}{6}(F_1(\\boldsymbol{\\sigma}^1_i)+2F_1(\\boldsymbol{\\sigma}^2_i)+2F_1(\\boldsymbol{\\sigma}^3_i)+F_1(\\boldsymbol{\\sigma}^4_i))\\] \\[\\boldsymbol{f}^{\\sigma, t+\\Delta t}_i = \\boldsymbol{f}^{\\sigma, t}_i + \\frac{\\Delta t}{6}(F_2(\\boldsymbol{v}^1_i,\\boldsymbol{\\sigma}^1_i)+2F_2(\\boldsymbol{v}^2_i,\\boldsymbol{\\sigma}^2_i)+2F_2(\\boldsymbol{v}^3_i,\\boldsymbol{\\sigma}^3_i)+F_2(\\boldsymbol{v}^4_i,\\boldsymbol{\\sigma}^4_i))\\] where: \\[\\begin{aligned} \\begin{array}{ll} \\boldsymbol{v}^1_i = \\boldsymbol{v}^t_i &\\boldsymbol{f}^{\\sigma, 1}_i = \\boldsymbol{f}^{\\sigma, t}_i\\\\ \\boldsymbol{v}^2_i = \\boldsymbol{v}^t_i+\\frac{\\Delta t}{2}(F_1(\\boldsymbol{\\sigma}^1_i)) &\\boldsymbol{f}^{\\sigma, 2}_i = \\boldsymbol{f}^{\\sigma, t}_i+\\frac{\\Delta t}{2}(F_2(\\boldsymbol{v}^1_i, \\boldsymbol{\\sigma}^1_i))\\\\ \\boldsymbol{v}^3_i = \\boldsymbol{v}^t_i+\\frac{\\Delta t}{2}(F_1(\\boldsymbol{\\sigma}^2_i)) &\\boldsymbol{f}^{\\sigma, 3}_i = \\boldsymbol{f}^{\\sigma, t}_i+\\frac{\\Delta t}{2}(F_2(\\boldsymbol{v}^2_i, \\boldsymbol{\\sigma}^2_i))\\\\ \\boldsymbol{v}^4_i = \\boldsymbol{v}^t_i+\\Delta t(F_1(\\boldsymbol{\\sigma}^3_i)) &\\boldsymbol{f}^{\\sigma, 4}_i = \\boldsymbol{f}^{\\sigma, t}_i+\\Delta t(F_2(\\boldsymbol{v}^3_i, \\boldsymbol{\\sigma}^3_i)) \\end{array} \\end{aligned}\\] In standard SPH, these eight eqs are spatially resolved at each calculation step by calculating \\(\\boldsymbol{v}_i^{t+\\Delta t}\\) and \\(\\boldsymbol{\\sigma}_i^{t+\\Delta t}\\) at each particle. Key point and aim: update the position, velocity and stress. Known \\(\\Delta x\\) , \\(\\nu\\) , \\(E\\) , \\(D_{pq}^e\\) , \\(\\rho_0\\) , \\(\\boldsymbol{f}^{ext} = \\vec{g}\\) , and paras for D-P yield criteria \\(c\\) , \\(\\varphi\\) , \\(\\alpha_{\\varphi}\\) and \\(k_c\\) . Given \\(\\boldsymbol{x}_i^1\\) , \\(\\boldsymbol{v}_i^1\\) , \\(\\boldsymbol{\\sigma}_i^1\\) . Step 1: calculate terms \\(\\boldsymbol{f}^{\\sigma}\\) and \\(\\boldsymbol{f}^v\\) . Step 2: update boundary conditions and adapt the stress. Step 3: calculate the gradient terms \\((\\nabla\\cdot\\boldsymbol{f}^{\\sigma})_i\\) and \\((\\nabla\\cdot\\boldsymbol{f}^v)_i\\) . Step 4: calculate the additional terms for the momentum equation, mainly the body force \\(\\boldsymbol{f}^{ext}_i\\) in which gravity is the only one considered. Also if included, the artificial viscosity is calculated here. Step 5: calculate the additional terms for the constitutive equation, mainly the plastic strain function \\(\\boldsymbol{g}^{\\epsilon^p}_i\\) . When calculating each particle, the stress state is checked to see if the yield criterion has been met. If the stress state lies within the elastic range ( \\(f<0\\) or \\(f=0,\\ {\\rm d}f>0\\) ), then \\(\\boldsymbol{g}^{\\epsilon^p}_i = 0\\) . Otherwise ( \\(f=0,\\ {\\rm d}f=0\\) ), the plastic term is calculated and \\(\\boldsymbol{g}^{\\epsilon^p}_i\\) is non-zero. The plastic term is a function of stress \\(\\boldsymbol{\\sigma}\\) and velocity gradients \\(\\nabla \\boldsymbol{v}\\) . For large deformation problems, the Jaumann stress rate \\(\\tilde{\\boldsymbol{\\sigma}}_i\\) is also updated. This involves gradients of the velocity \\(\\nabla \\boldsymbol{v}\\) . Step 6: compute \\(F_1\\) and \\(F_2\\) on particles. Step 7: calculate \\(\\boldsymbol{v}_i^2\\) and \\(\\boldsymbol{\\sigma}_i^2\\) . Step 8: if necessary, the boundary conditions and stress state are again updated. Step 9: repeat Steps 1-8 to obtain \\(\\boldsymbol{u}_i^3\\) , \\(\\boldsymbol{\\sigma}_i^3\\) , \\(\\boldsymbol{v}_i^4\\) and \\(\\boldsymbol{\\sigma}_i^4\\) . Then update the velocity \\(\\boldsymbol{v}_i^{t+\\Delta t}\\) and the stress \\(\\boldsymbol{\\sigma}_i^{t+\\Delta t}\\) at the subsequent time step, also the positions \\(\\boldsymbol{x}_i^{t+\\Delta t}\\) of the particles. As for the calculation of plastic potential function item: As for the implementation of RK4:","title":"RK4 for standard Drucker-Prager soil SPH"},{"location":"taichi/","text":"Taichi Lang Introduction Basic concepts Advanced topics GGUI","title":"Taichi Lang"},{"location":"taichi/#taichi-lang","text":"","title":"Taichi Lang"},{"location":"taichi/#introduction","text":"","title":"Introduction"},{"location":"taichi/#basic-concepts","text":"","title":"Basic concepts"},{"location":"taichi/#advanced-topics","text":"","title":"Advanced topics"},{"location":"taichi/#ggui","text":"","title":"GGUI"}]}